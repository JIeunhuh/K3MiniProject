{"ast":null,"code":"var _jsxFileName = \"C:\\\\K3MiniProject\\\\project_front\\\\my_mini_project\\\\src\\\\project\\\\Community(SignUp&In)\\\\Login.js\",\n  _s = $RefreshSig$();\n//login page\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { idState, passwordState, isLoggedInState, nicknameState } from \"../LoginRecoil\";\nimport style from './Login.module.css';\nimport { useLocation, useNavigate } from 'react-router-dom';\n// token에서 nickname을 추출하기 위함\nimport jwtDecode from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  // modal component 이용해서 로그인 구현\n  // id / pw 상태관리\n\n  const [id, setId] = useRecoilState(idState);\n  const [password, setPassword] = useRecoilState(passwordState);\n\n  // const [name, setName] = useState('');\n  const history = useNavigate();\n\n  //인증 상태\n  const [isLoggedIn, setIsLoggedIn] = useRecoilState(isLoggedInState);\n\n  // token -> nickname\n  const [nickname, setNickname] = useRecoilState(nicknameState);\n\n  // 로그인 db url 가져오기\n  const login = () => {\n    // const data = {\n    //     id,\n    //     password\n    // };\n\n    // dummy data에 id, pw 존재하면 로그인 성공으로 간주 \n    const user = dummy.Member.find(member => member.id === id & member.password === password);\n    if (user) {\n      alert('로그인 완료');\n      setIsAuth(true);\n      history('/comm');\n    } else {\n      alert('no User Id or PW');\n    }\n\n    //     // login db 요청\n    //     axios.post('http://10.125.121.176:8080/login', data)\n    //         .then((response) => {\n    //             // token 가져오기\n    //             const jwtToken = response.headers.get('Authorization');\n    //             if (jwtToken != null) {\n    //                 alert('로그인 완료');\n    //                 // sessionStorage에 토큰 저장\n    //                 sessionStorage.setItem('jwt',jwtToken);\n    //                 setIsAuth(true);\n    //                 // 회원가입이 완료되면 로그인 페이지로 이동\n    //                 history('/comm');\n    //             }\n    //         })\n    //         .catch(() => alert('비밀번호가 올바르지 않습니다.'));\n    // login db 요청\n    axios.post('http://10.125.121.176:8080/login', data).then(response => {\n      // token 가져오기\n      const jwtToken = response.headers.get('Authorization');\n      console.log('response', response);\n      if (jwtToken != null) {\n        // sessionStorage에 토큰 저장\n        localStorage.setItem('jwt', jwtToken);\n        setIsLoggedIn(localStorage.getItem('jwt', jwtToken));\n\n        // 토큰 추출 및 닉네임 저장\n        // token decoding\n        const splitToken = jwtToken.split(\" \")[1];\n        const decodedToken = jwtDecode(splitToken);\n        const extractedNickname = decodedToken.nickname;\n        // nickname statement\n        setNickname(extractedNickname);\n        alert(extractedNickname + '님, 환영합니다 !');\n\n        // 회원가입이 완료되면 로그인 페이지로 이동\n        // history('/comm');\n        history('/find');\n      }\n    }).catch(() => alert('비밀번호가 올바르지 않습니다.'));\n  };\n  // console.log(nickname);\n  // console.log('token', isLoggedIn);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${style.container}`,\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: `${style.container2} ${style.loginContainer}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `nes-field ${style.inputTxt}`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: `${style.putText}`,\n          children: \"Id\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name_field\",\n          value: id,\n          onChange: e => setId(e.target.value),\n          className: \"nes-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `nes-field ${style.inputTxt}`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: `${style.putText}`,\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"name_field\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          className: \"nes-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: login,\n        className: `${style.submitBtn}`,\n        children: \"Sign in !\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${style.loginImg}`,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        style: {\n          backgroundColor: 'transparent'\n        },\n        src: \"/images/loginCircle.svg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: `${style.signUpcom} ${style.signUpcom1}`,\n        children: [\"Enjoy your \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 32\n        }, this), \" gourmet life !\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n};\n_s(Login, \"BqHaIAwCA7/WwDwRRR/BxMrVOqc=\", false, function () {\n  return [useRecoilState, useRecoilState, useNavigate, useRecoilState, useRecoilState];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["axios","useEffect","useState","useRecoilState","idState","passwordState","isLoggedInState","nicknameState","style","useLocation","useNavigate","jwtDecode","jsxDEV","_jsxDEV","Login","_s","id","setId","password","setPassword","history","isLoggedIn","setIsLoggedIn","nickname","setNickname","login","user","dummy","Member","find","member","alert","setIsAuth","post","data","then","response","jwtToken","headers","get","console","log","localStorage","setItem","getItem","splitToken","split","decodedToken","extractedNickname","catch","className","container","children","container2","loginContainer","inputTxt","putText","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","submitBtn","loginImg","backgroundColor","src","signUpcom","signUpcom1","_c","$RefreshReg$"],"sources":["C:/K3MiniProject/project_front/my_mini_project/src/project/Community(SignUp&In)/Login.js"],"sourcesContent":["//login page\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { idState, passwordState, isLoggedInState, nicknameState } from \"../LoginRecoil\";\r\nimport style from './Login.module.css';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\n// token에서 nickname을 추출하기 위함\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\n\r\nconst Login = () => {\r\n    // modal component 이용해서 로그인 구현\r\n    // id / pw 상태관리\r\n\r\n    const [id, setId] = useRecoilState(idState);\r\n    const [password, setPassword] = useRecoilState(passwordState);\r\n\r\n    // const [name, setName] = useState('');\r\n    const history = useNavigate();\r\n    \r\n\r\n    //인증 상태\r\n    const [isLoggedIn, setIsLoggedIn] = useRecoilState(isLoggedInState);\r\n\r\n    // token -> nickname\r\n    const [nickname, setNickname] = useRecoilState(nicknameState);\r\n\r\n    // 로그인 db url 가져오기\r\n    const login = () => {\r\n\r\n        // const data = {\r\n        //     id,\r\n        //     password\r\n        // };\r\n\r\n        // dummy data에 id, pw 존재하면 로그인 성공으로 간주 \r\n        const user = dummy.Member.find(member => member.id === id & member.password === password);\r\n        if(user) {\r\n            alert('로그인 완료');\r\n            setIsAuth(true);\r\n            history('/comm');\r\n        }\r\n        else{\r\n            alert('no User Id or PW');\r\n        }\r\n\r\n    //     // login db 요청\r\n    //     axios.post('http://10.125.121.176:8080/login', data)\r\n    //         .then((response) => {\r\n    //             // token 가져오기\r\n    //             const jwtToken = response.headers.get('Authorization');\r\n    //             if (jwtToken != null) {\r\n    //                 alert('로그인 완료');\r\n    //                 // sessionStorage에 토큰 저장\r\n    //                 sessionStorage.setItem('jwt',jwtToken);\r\n    //                 setIsAuth(true);\r\n    //                 // 회원가입이 완료되면 로그인 페이지로 이동\r\n    //                 history('/comm');\r\n    //             }\r\n    //         })\r\n    //         .catch(() => alert('비밀번호가 올바르지 않습니다.'));\r\n        // login db 요청\r\n        axios.post('http://10.125.121.176:8080/login', data)\r\n            .then((response) => {\r\n                // token 가져오기\r\n                const jwtToken = response.headers.get('Authorization');\r\n                console.log('response', response);\r\n                if (jwtToken != null) {\r\n                    // sessionStorage에 토큰 저장\r\n                    localStorage.setItem('jwt', jwtToken);\r\n                    setIsLoggedIn(localStorage.getItem('jwt', jwtToken));\r\n\r\n\r\n                    // 토큰 추출 및 닉네임 저장\r\n                    // token decoding\r\n                    const splitToken = jwtToken.split(\" \")[1];\r\n                    const decodedToken = jwtDecode(splitToken);\r\n                    const extractedNickname = decodedToken.nickname;\r\n                    // nickname statement\r\n                    setNickname(extractedNickname);\r\n\r\n                    alert(extractedNickname+'님, 환영합니다 !');\r\n\r\n                    // 회원가입이 완료되면 로그인 페이지로 이동\r\n                    // history('/comm');\r\n                    history('/find');\r\n                }\r\n\r\n            })\r\n            .catch(() => alert('비밀번호가 올바르지 않습니다.'));\r\n    }\r\n    // console.log(nickname);\r\n    // console.log('token', isLoggedIn);\r\n\r\n    return (\r\n        <div className={`${style.container}`}>\r\n            <form className={`${style.container2} ${style.loginContainer}`}>\r\n                <div className={`nes-field ${style.inputTxt}`}>\r\n                    <p className={`${style.putText}`}>Id</p>\r\n                    <input type=\"text\" id=\"name_field\" value={id} onChange={(e) => setId(e.target.value)} className=\"nes-input\"></input>\r\n                </div>\r\n                <div className={`nes-field ${style.inputTxt}`}>\r\n                    <p className={`${style.putText}`}>Password</p>\r\n                    <input type=\"password\" id=\"name_field\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"nes-input\" />\r\n                </div>\r\n                <button type=\"button\" onClick={login} className={`${style.submitBtn}`}>Sign in !</button>\r\n            </form>\r\n            <div className={`${style.loginImg}`} >\r\n                <img style={{ backgroundColor: 'transparent' }} src='/images/loginCircle.svg' />\r\n                <h1 className={`${style.signUpcom} ${style.signUpcom1}`}>\r\n                    Enjoy your <br /> gourmet life !\r\n                </h1>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Login;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}