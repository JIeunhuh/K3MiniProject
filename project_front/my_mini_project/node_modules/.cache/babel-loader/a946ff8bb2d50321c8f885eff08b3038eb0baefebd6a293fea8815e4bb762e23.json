{"ast":null,"code":"import e, { useLayoutEffect as o, useEffect as t, useState as n, useRef as a, useImperativeHandle as r, useContext as i, useMemo as s } from \"react\";\nimport l from \"react-dom\";\nfunction d() {\n  return d = Object.assign || function (e) {\n    for (var o = 1; o < arguments.length; o++) {\n      var t = arguments[o];\n      for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);\n    }\n    return e;\n  }, d.apply(this, arguments);\n}\nfunction c(e, o) {\n  if (null == e) return {};\n  var t,\n    n,\n    a = {},\n    r = Object.keys(e);\n  for (n = 0; n < r.length; n++) o.indexOf(t = r[n]) >= 0 || (a[t] = e[t]);\n  return a;\n}\nconst p = \"undefined\" != typeof window && \"undefined\" != typeof document ? o : t,\n  u = (e, o, t) => {\n    p(() => {\n      if (!e || !t) return;\n      const n = (...o) => void 0 === o ? t(e) : t(e, ...o);\n      return kakao.maps.event.addListener(e, o, n), () => {\n        kakao.maps.event.removeListener(e, o, n);\n      };\n    }, [e, o, t]);\n  };\nvar k;\n!function (e) {\n  e[e.INITIALIZED = 0] = \"INITIALIZED\", e[e.LOADING = 1] = \"LOADING\", e[e.SUCCESS = 2] = \"SUCCESS\", e[e.FAILURE = 3] = \"FAILURE\";\n}(k || (k = {}));\nclass m {\n  constructor({\n    appkey: e,\n    id: o = \"__reactKakaoMapsSdkloaderId\",\n    libraries: t = [],\n    nonce: n,\n    retries: a = 3,\n    url: r = \"//dapi.kakao.com/v2/maps/sdk.js\"\n  }) {\n    if (this.id = void 0, this.appkey = void 0, this.url = void 0, this.libraries = void 0, this.nonce = void 0, this.retries = void 0, this.callbacks = [], this.done = !1, this.loading = !1, this.errors = [], this.onerrorEvent = void 0, this.id = o, this.appkey = e, this.libraries = t, this.nonce = n, this.retries = a, this.url = r, m.instance) {\n      if (!m.equalOptions(this.options, m.instance.options)) throw new Error(`Loader must not be called again with different options. ${JSON.stringify(this.options)} !== ${JSON.stringify(m.instance.options)}`);\n      return m.instance;\n    }\n    m.instance = this;\n  }\n  get options() {\n    return {\n      appkey: this.appkey,\n      id: this.id,\n      libraries: this.libraries,\n      nonce: this.nonce,\n      retries: this.retries,\n      url: this.url\n    };\n  }\n  static isLoaded() {\n    return new Promise(e => m.instance ? m.instance.status === k.FAILURE || m.instance.status === k.INITIALIZED ? e(!1) : (m.instance.status === k.LOADING && m.loadcheckcallbacks.push(o => e(!o)), e(!0)) : window.kakao && window.kakao.maps ? window.kakao.maps.load(() => {\n      e(!0);\n    }) : m.loadcheckcallbacks.push(o => {\n      e(!o);\n    }));\n  }\n  load() {\n    return new Promise((e, o) => {\n      this.loadCallback(t => {\n        t ? o(t.error) : e(window.kakao);\n      });\n    });\n  }\n  get status() {\n    return this.onerrorEvent ? k.FAILURE : this.done ? k.SUCCESS : this.loading ? k.LOADING : k.INITIALIZED;\n  }\n  get failed() {\n    return this.done && !this.loading && this.errors.length >= this.retries + 1;\n  }\n  loadCallback(e) {\n    this.callbacks.push(e), this.execute();\n  }\n  resetIfRetryingFailed() {\n    this.failed && this.reset();\n  }\n  reset() {\n    this.deleteScript(), this.done = !1, this.loading = !1, this.errors = [], this.onerrorEvent = void 0;\n  }\n  execute() {\n    if (this.resetIfRetryingFailed(), this.done) this.callback();else {\n      if (window.kakao && window.kakao.maps) return console.warn(\"Kakao Maps이 이미 외부 요소에 의해 로딩되어 있습니다.설정한 옵션과 일치 하지 않을 수 있으며, 이에 따른 예상치 동작이 발생할 수 있습니다.\"), void window.kakao.maps.load(this.callback);\n      this.loading || (this.loading = !0, this.setScript());\n    }\n  }\n  setScript() {\n    document.getElementById(this.id) && this.callback();\n    const e = this.createUrl(),\n      o = document.createElement(\"script\");\n    o.id = this.id, o.type = \"text/javascript\", o.src = e, o.onerror = this.loadErrorCallback.bind(this), o.onload = this.callback.bind(this), o.defer = !0, o.async = !0, this.nonce && (o.nonce = this.nonce), document.head.appendChild(o);\n  }\n  loadErrorCallback(e, o, t, n, a) {\n    if (this.errors.push({\n      event: e,\n      source: o,\n      lineno: t,\n      colno: n,\n      error: a\n    }), this.errors.length <= this.retries) {\n      const e = this.errors.length * 2 ** this.errors.length;\n      console.log(`Failed to load Kakao Maps script, retrying in ${e} ms.`), setTimeout(() => {\n        this.deleteScript(), this.setScript();\n      }, e);\n    } else this.onerrorEvent = this.errors[this.errors.length - 1], this.callback();\n  }\n  createUrl() {\n    let e = this.url;\n    return e += `?appkey=${this.appkey}`, this.libraries.length && (e += `&libraries=${this.libraries.join(\",\")}`), e += \"&autoload=false\", e;\n  }\n  deleteScript() {\n    const e = document.getElementById(this.id);\n    e && e.remove();\n  }\n  callback() {\n    kakao.maps.load(() => {\n      this.done = !0, this.loading = !1, this.callbacks.forEach(e => {\n        e(this.onerrorEvent);\n      }), this.callbacks = [], m.loadcheckcallbacks.forEach(e => {\n        e(this.onerrorEvent);\n      }), m.loadcheckcallbacks = [];\n    });\n  }\n  static equalOptions(e, o) {\n    if (e.appkey !== o.appkey) return !1;\n    if (e.id !== o.id) return !1;\n    if (e.libraries.length !== o.libraries.length) return !1;\n    for (let t = 0; t < e.libraries.length; ++t) if (e.libraries[t] !== o.libraries[t]) return !1;\n    return e.nonce === o.nonce && e.retries === o.retries && e.url === o.url;\n  }\n}\nm.instance = void 0, m.loadcheckcallbacks = [];\nconst g = [\"id\", \"as\", \"children\", \"center\", \"isPanto\", \"padding\", \"disableDoubleClick\", \"disableDoubleClickZoom\", \"draggable\", \"zoomable\", \"keyboardShortcuts\", \"level\", \"maxLevel\", \"minLevel\", \"mapTypeId\", \"projectionId\", \"scrollwheel\", \"tileAnimation\", \"onBoundsChanged\", \"onCenterChanged\", \"onClick\", \"onDoubleClick\", \"onDrag\", \"onDragEnd\", \"onDragStart\", \"onIdle\", \"onMaptypeidChanged\", \"onMouseMove\", \"onRightClick\", \"onTileLoaded\", \"onZoomChanged\", \"onZoomStart\", \"onCreate\"],\n  h = e.createContext(void 0),\n  w = e.forwardRef((o, t) => {\n    let {\n        id: i,\n        as: s,\n        children: l,\n        center: k,\n        isPanto: w = !1,\n        padding: v = 32,\n        disableDoubleClick: f,\n        disableDoubleClickZoom: C,\n        draggable: y,\n        zoomable: b,\n        keyboardShortcuts: I,\n        level: M,\n        maxLevel: L,\n        minLevel: O,\n        mapTypeId: x,\n        projectionId: S,\n        scrollwheel: E,\n        tileAnimation: z,\n        onBoundsChanged: P,\n        onCenterChanged: R,\n        onClick: A,\n        onDoubleClick: D,\n        onDrag: T,\n        onDragEnd: Z,\n        onDragStart: W,\n        onIdle: N,\n        onMaptypeidChanged: j,\n        onMouseMove: _,\n        onRightClick: F,\n        onTileLoaded: G,\n        onZoomChanged: U,\n        onZoomStart: V,\n        onCreate: B\n      } = o,\n      $ = c(o, g);\n    const q = s || \"div\",\n      [H, J] = n(!1),\n      [K, X] = n(),\n      Y = a(null);\n    return p(() => {\n      m.isLoaded().then(J);\n    }, []), p(() => {\n      if (!H) return;\n      const e = Y.current;\n      if (!e) return;\n      const o = \"lat\" in k ? new kakao.maps.LatLng(k.lat, k.lng) : new kakao.maps.Coords(k.x, k.y),\n        t = new kakao.maps.Map(e, {\n          center: o,\n          disableDoubleClick: f,\n          disableDoubleClickZoom: C,\n          draggable: y,\n          keyboardShortcuts: I,\n          level: M,\n          mapTypeId: x,\n          projectionId: S,\n          scrollwheel: E,\n          tileAnimation: z\n        });\n      return X(t), () => {\n        e.innerHTML = \"\";\n      };\n    }, [H, f, C, x, z]), r(t, () => K, [K]), p(() => {\n      K && B && B(K);\n    }, [K, B]), p(() => {\n      if (!K) return;\n      let e = K.getCenter();\n      e instanceof kakao.maps.Coords && (e = e.toLatLng());\n      const o = \"lat\" in k ? new kakao.maps.LatLng(k.lat, k.lng) : new kakao.maps.Coords(k.x, k.y);\n      o instanceof kakao.maps.LatLng && o.equals(e) || o instanceof kakao.maps.Coords && o.toLatLng().equals(e) || (w ? K.panTo(o, v) : K.setCenter(o));\n    }, [K, k.lat, k.lng, k.x, k.y]), p(() => {\n      K && void 0 !== y && K.setDraggable(y);\n    }, [K, y]), p(() => {\n      K && void 0 !== b && K.setZoomable(b);\n    }, [K, b]), p(() => {\n      K && I && \"boolean\" == typeof I && K.setKeyboardShortcuts(I);\n    }, [K, I]), p(() => {\n      K && M && K.setLevel(M);\n    }, [K, M]), p(() => {\n      K && x && K.setMapTypeId(x);\n    }, [K, x]), p(() => {\n      K && S && K.setProjectionId(S);\n    }, [K, S]), p(() => {\n      K && L && K.setMaxLevel(L);\n    }, [K, L]), p(() => {\n      K && O && K.setMinLevel(O);\n    }, [K, O]), u(K, \"bounds_changed\", P), u(K, \"center_changed\", R), u(K, \"click\", A), u(K, \"dblclick\", D), u(K, \"drag\", T), u(K, \"dragstart\", W), u(K, \"dragend\", Z), u(K, \"idle\", N), u(K, \"maptypeid_changed\", j), u(K, \"mousemove\", _), u(K, \"rightclick\", F), u(K, \"tilesloaded\", G), u(K, \"zoom_changed\", U), u(K, \"zoom_start\", V), e.createElement(e.Fragment, null, e.createElement(q, d({\n      id: i || \"react-kakao-maps-sdk-map-container\"\n    }, $, {\n      ref: Y\n    })), K && e.createElement(h.Provider, {\n      value: K\n    }, l));\n  }),\n  v = e => {\n    const o = i(h);\n    if (!o) throw new Error((e ? e + \" Component\" : \"useMap\") + \" must exist inside Map Component!\");\n    return o;\n  },\n  f = e.forwardRef(({\n    map: e,\n    position: t,\n    marker: n,\n    children: i,\n    altitude: d,\n    disableAutoPan: c,\n    range: p,\n    removable: u,\n    zIndex: k,\n    onCreate: m\n  }, g) => {\n    const h = a(document.createElement(\"div\")),\n      w = s(() => {\n        const e = new kakao.maps.InfoWindow({\n          altitude: d,\n          disableAutoPan: c,\n          range: p,\n          removable: u,\n          zIndex: k,\n          content: h.current,\n          position: t\n        });\n        return h.current.style.display = \"none\", e;\n      }, [c, u]);\n    return r(g, () => w, [w]), o(() => (w.open(e, n), () => {\n      w.close();\n    }), [e, n]), o(() => {\n      m && m(w);\n    }, [w, m]), o(() => {\n      w && w.setPosition(t);\n    }, [w, t]), o(() => {\n      w && d && w.setAltitude(d);\n    }, [w, d]), o(() => {\n      w && p && w.setRange(p);\n    }, [w, p]), o(() => {\n      w && k && w.setZIndex(k);\n    }, [w, k]), h.current.parentElement && l.createPortal(i, h.current.parentElement);\n  }),\n  C = e.createContext(void 0),\n  y = e.forwardRef(({\n    children: t,\n    averageCenter: n,\n    calculator: a,\n    clickable: i,\n    disableClickZoom: l,\n    gridSize: d,\n    hoverable: c,\n    minClusterSize: p,\n    minLevel: k,\n    styles: m,\n    texts: g,\n    onClusterclick: h,\n    onClusterdblclick: w,\n    onClustered: f,\n    onClusterout: y,\n    onClusterover: I,\n    onClusterrightclick: M,\n    onCreate: L\n  }, O) => {\n    const x = v(\"MarkerClusterer\"),\n      S = s(() => {\n        if (window.kakao.maps.MarkerClusterer) return new kakao.maps.MarkerClusterer({\n          averageCenter: n,\n          calculator: a,\n          clickable: i,\n          disableClickZoom: l,\n          gridSize: d,\n          hoverable: c,\n          minClusterSize: p,\n          minLevel: k,\n          styles: m,\n          texts: g\n        });\n        console.warn(\"clusterer 라이브러리를 별도 로드 해야 사용 가능합니다. `https://apis.map.kakao.com/web/guide/#loadlibrary`\");\n      }, []);\n    return r(O, () => S, [S]), o(() => {\n      null == S || S.setMap(x);\n    }, [x, S]), o(() => {\n      S && L && L(S);\n    }, [S, L]), o(() => {\n      S && d && (S.setGridSize(d), S.redraw());\n    }, [S, d]), o(() => {\n      S && p && (S.setMinClusterSize(p), S.redraw());\n    }, [S, p]), o(() => {\n      S && void 0 !== n && (S.setAverageCenter(n), S.redraw());\n    }, [S, n]), o(() => {\n      S && k && (S.setMinLevel(k), S.redraw());\n    }, [S, k]), o(() => {\n      S && g && (S.setTexts(g), S.redraw());\n    }, [S, g]), o(() => {\n      S && a && (S.setCalculator(a), S.redraw());\n    }, [S, a]), u(S, \"clustered\", f), u(S, \"clusterclick\", h), u(S, \"clusterover\", I), u(S, \"clusterout\", y), u(S, \"clusterdblclick\", w), u(S, \"clusterrightclick\", M), o(() => {\n      S && m && (S.setStyles(m), S.redraw());\n    }, [S, m]), S ? e.createElement(C.Provider, {\n      value: S\n    }, t, e.createElement(b, {\n      children: t\n    })) : null;\n  }),\n  b = ({}) => {\n    const e = i(C);\n    return p(() => {\n      e.redraw();\n    }), null;\n  },\n  I = e.forwardRef(({\n    map: t,\n    position: n,\n    children: a,\n    altitude: l,\n    clickable: d,\n    draggable: c,\n    image: p,\n    infoWindowOptions: k,\n    onCreate: m,\n    onClick: g,\n    onDragEnd: h,\n    onDragStart: w,\n    onMouseOut: v,\n    onMouseOver: y,\n    opacity: b,\n    range: I,\n    title: M,\n    zIndex: L\n  }, O) => {\n    const x = i(C),\n      S = s(() => new kakao.maps.Marker({\n        altitude: l,\n        clickable: d,\n        draggable: c,\n        image: p,\n        opacity: b,\n        range: I,\n        title: M,\n        zIndex: L,\n        position: n\n      }), []);\n    return r(O, () => S, [S]), o(() => (x ? x.addMarker(S, !0) : S.setMap(t), () => {\n      x ? x.removeMarker(S, !0) : S.setMap(null);\n    }), [t, x, S]), o(() => {\n      m && m(S);\n    }, [S, m]), u(S, \"click\", g), u(S, \"dragstart\", w), u(S, \"dragend\", h), u(S, \"mouseout\", v), u(S, \"mouseover\", y), o(() => {\n      t && S && n && S.setPosition(n);\n    }, [t, S, n]), o(() => {\n      t && S && p && S.setImage(p);\n    }, [t, S, p]), o(() => {\n      t && S && l && S.setAltitude(l);\n    }, [t, S, l]), o(() => {\n      t && S && void 0 !== d && S.setClickable(d);\n    }, [t, S, d]), o(() => {\n      t && S && void 0 !== c && S.setDraggable(c);\n    }, [t, S, c]), o(() => {\n      t && S && b && S.setOpacity(b);\n    }, [t, S, b]), o(() => {\n      t && S && I && S.setRange(I);\n    }, [t, S, I]), o(() => {\n      t && S && M && S.setTitle(M);\n    }, [t, S, M]), o(() => {\n      t && S && L && S.setZIndex(L);\n    }, [t, S, L]), a ? e.createElement(f, {\n      position: n,\n      map: t,\n      marker: S,\n      altitude: null == k ? void 0 : k.altitude,\n      disableAutoPan: null == k ? void 0 : k.disableAutoPan,\n      range: null == k ? void 0 : k.range,\n      removable: null == k ? void 0 : k.removable,\n      zIndex: null == k ? void 0 : k.zIndex\n    }, a) : null;\n  }),\n  M = e.forwardRef(({\n    image: o,\n    position: t,\n    children: n,\n    clickable: a,\n    draggable: r,\n    infoWindowOptions: i,\n    onClick: l,\n    onDragEnd: d,\n    onDragStart: c,\n    onMouseOut: p,\n    onMouseOver: u,\n    onCreate: k,\n    opacity: m,\n    title: g,\n    zIndex: h\n  }, w) => {\n    const f = v(\"MapMarker\"),\n      C = s(() => {\n        var e, t, n, a, r, i, s, l, d, c, p, u;\n        return o && new kakao.maps.MarkerImage(o.src, new kakao.maps.Size(o.size.width, o.size.height), {\n          alt: null == (e = o.options) ? void 0 : e.alt,\n          coords: null == (t = o.options) ? void 0 : t.coords,\n          offset: (null == (n = o.options) ? void 0 : n.offset) && new kakao.maps.Point(null == (a = o.options) ? void 0 : a.offset.x, null == (r = o.options) ? void 0 : r.offset.y),\n          shape: null == (i = o.options) ? void 0 : i.shape,\n          spriteOrigin: (null == (s = o.options) ? void 0 : s.spriteOrigin) && new kakao.maps.Point(null == (l = o.options) ? void 0 : l.spriteOrigin.x, null == (d = o.options) ? void 0 : d.spriteOrigin.y),\n          spriteSize: (null == (c = o.options) ? void 0 : c.spriteSize) && new kakao.maps.Size(null == (p = o.options) ? void 0 : p.spriteSize.width, null == (u = o.options) ? void 0 : u.spriteSize.height)\n        });\n      }, [o]),\n      y = s(() => \"lat\" in t ? new kakao.maps.LatLng(t.lat, t.lng) : new kakao.maps.Coords(t.x, t.y).toLatLng(), [t.lat, t.lng, t.x, t.y]);\n    return e.createElement(I, {\n      map: f,\n      position: y,\n      image: C,\n      clickable: a,\n      draggable: r,\n      infoWindowOptions: i,\n      onClick: l,\n      onDragEnd: d,\n      onDragStart: c,\n      onMouseOut: p,\n      onMouseOver: u,\n      onCreate: k,\n      opacity: m,\n      title: g,\n      zIndex: h,\n      ref: w\n    }, n);\n  }),\n  L = e.forwardRef(({\n    position: o,\n    children: t,\n    disableAutoPan: n,\n    removable: a,\n    zIndex: r,\n    onCreate: i\n  }, l) => {\n    const d = v(\"MapInfoWindow\"),\n      c = s(() => new kakao.maps.LatLng(o.lat, o.lng), [o.lat, o.lng]);\n    return e.createElement(f, {\n      disableAutoPan: n,\n      removable: a,\n      zIndex: r,\n      map: d,\n      position: c,\n      onCreate: i,\n      ref: l\n    }, t);\n  }),\n  O = e.forwardRef(({\n    position: e,\n    children: t,\n    clickable: n,\n    xAnchor: d,\n    yAnchor: c,\n    zIndex: p,\n    onCreate: u\n  }, k) => {\n    const m = i(C),\n      g = v(\"CustomOverlayMap\"),\n      h = a(document.createElement(\"div\")),\n      w = s(() => new kakao.maps.LatLng(e.lat, e.lng), [e.lat, e.lng]),\n      f = s(() => {\n        const e = new kakao.maps.CustomOverlay({\n          clickable: n,\n          xAnchor: d,\n          yAnchor: c,\n          zIndex: p,\n          position: w,\n          content: h.current\n        });\n        return h.current.style.display = \"none\", e;\n      }, [n, d, c]);\n    return r(k, () => f, [f]), o(() => {\n      if (g) return m ? m.addMarker(f, !0) : f.setMap(g), () => {\n        m ? m.removeMarker(f, !0) : f.setMap(null);\n      };\n    }, [g, m, f]), o(() => {\n      u && u(f);\n    }, [f, u]), o(() => {\n      f.setPosition(w);\n    }, [f, w]), o(() => {\n      p && f.setZIndex(p);\n    }, [f, p]), h.current.parentElement && l.createPortal(t, h.current.parentElement);\n  }),\n  x = e.forwardRef(({\n    position: e = kakao.maps.ControlPosition.TOPRIGHT\n  }, t) => {\n    const n = v(\"MapTypeControl\"),\n      a = s(() => new kakao.maps.MapTypeControl(), []);\n    return r(t, () => a, [a]), o(() => (n.addControl(a, e), () => {\n      n.removeControl(a);\n    }), [n, a, e]), null;\n  }),\n  S = e.forwardRef(({\n    position: e = kakao.maps.ControlPosition.RIGHT\n  }, o) => {\n    const n = v(\"ZoomControl\"),\n      a = s(() => new kakao.maps.ZoomControl(), []);\n    return r(o, () => a, [a]), t(() => (n.addControl(a, e), () => {\n      n.removeControl(a);\n    }), [n, e]), null;\n  }),\n  E = ({\n    type: e\n  }) => {\n    const o = v(\"MapTypeId\");\n    return t(() => (o.addOverlayMapTypeId(e), () => {\n      o.removeOverlayMapTypeId(e);\n    }), [o, e]), null;\n  },\n  z = e.forwardRef(({\n    center: e,\n    radius: t,\n    fillColor: n,\n    fillOpacity: a,\n    strokeColor: i,\n    strokeOpacity: l,\n    strokeStyle: d,\n    strokeWeight: c,\n    zIndex: p,\n    onMouseover: k,\n    onMouseout: m,\n    onMousemove: g,\n    onMousedown: h,\n    onClick: w,\n    onCreate: f\n  }, C) => {\n    const y = v(\"Circle\"),\n      b = s(() => new kakao.maps.LatLng(e.lat, e.lng), [e.lat, e.lng]),\n      I = s(() => new kakao.maps.Circle({\n        center: b,\n        radius: t,\n        fillColor: n,\n        fillOpacity: a,\n        strokeColor: i,\n        strokeOpacity: l,\n        strokeStyle: d,\n        strokeWeight: c,\n        zIndex: p\n      }), []);\n    return r(C, () => I, [I]), o(() => (I.setMap(y), () => {\n      I.setMap(null);\n    }), [y, I]), o(() => {\n      f && f(I);\n    }, [I, f]), o(() => {\n      I && I.setPosition(b);\n    }, [I, b]), o(() => {\n      I.setRadius(t);\n    }, [I, t]), o(() => {\n      p && I.setZIndex(p);\n    }, [I, p]), o(() => {\n      I.setOptions({\n        fillColor: n,\n        fillOpacity: a,\n        strokeColor: i,\n        strokeOpacity: l,\n        strokeStyle: d,\n        strokeWeight: c\n      });\n    }, [I, n, a, i, l, d, c]), u(I, \"mouseover\", k), u(I, \"mouseout\", m), u(I, \"mousemove\", g), u(I, \"mousedown\", h), u(I, \"click\", w), null;\n  }),\n  P = e.forwardRef(({\n    path: e,\n    endArrow: t,\n    onClick: n,\n    onMousedown: a,\n    onMousemove: i,\n    onMouseout: l,\n    onMouseover: d,\n    onCreate: c,\n    strokeColor: p,\n    strokeOpacity: k,\n    strokeStyle: m,\n    strokeWeight: g,\n    zIndex: h\n  }, w) => {\n    const f = v(\"Polyline\"),\n      C = s(() => e.every(e => e instanceof Array) ? e.map(e => e.map(e => new kakao.maps.LatLng(e.lat, e.lng))) : e.map(e => new kakao.maps.LatLng(e.lat, e.lng)), [e]),\n      y = s(() => new kakao.maps.Polyline({\n        path: C,\n        endArrow: t,\n        strokeColor: p,\n        strokeOpacity: k,\n        strokeStyle: m,\n        strokeWeight: g,\n        zIndex: h\n      }), []);\n    return r(w, () => y, [y]), o(() => (y.setMap(f), () => y.setMap(null)), [f, y]), o(() => {\n      c && c(y);\n    }, [y, c]), o(() => {\n      y.setOptions({\n        endArrow: t,\n        strokeColor: p,\n        strokeOpacity: k,\n        strokeStyle: m,\n        strokeWeight: g\n      });\n    }, [y, t, p, k, m, g]), o(() => {\n      y.setPath(C);\n    }, [y, C]), o(() => {\n      h && y.setZIndex(h);\n    }, [y, h]), u(y, \"mouseover\", d), u(y, \"mouseout\", l), u(y, \"mousemove\", i), u(y, \"mousedown\", a), u(y, \"click\", n), null;\n  }),\n  R = e.forwardRef(({\n    path: e,\n    onClick: t,\n    onMousedown: n,\n    onMousemove: a,\n    onMouseout: i,\n    onMouseover: l,\n    onCreate: d,\n    strokeColor: c,\n    strokeOpacity: p,\n    strokeStyle: k,\n    strokeWeight: m,\n    fillColor: g,\n    fillOpacity: h,\n    zIndex: w\n  }, f) => {\n    const C = v(\"Polygon\"),\n      y = s(() => e.every(e => e instanceof Array) ? e.map(e => e.map(e => new kakao.maps.LatLng(e.lat, e.lng))) : e.map(e => new kakao.maps.LatLng(e.lat, e.lng)), [e]),\n      b = s(() => new kakao.maps.Polygon({\n        path: y,\n        fillColor: g,\n        fillOpacity: h,\n        strokeColor: c,\n        strokeOpacity: p,\n        strokeStyle: k,\n        strokeWeight: m,\n        zIndex: w\n      }), []);\n    return r(f, () => b, [b]), o(() => (b.setMap(C), () => b.setMap(null)), [C, b]), o(() => {\n      d && d(b);\n    }, [b, d]), o(() => {\n      b.setOptions({\n        fillColor: g,\n        fillOpacity: h,\n        strokeColor: c,\n        strokeOpacity: p,\n        strokeStyle: k,\n        strokeWeight: m\n      });\n    }, [b, g, h, c, p, k, m]), o(() => {\n      b.setPath(y);\n    }, [b, y]), o(() => {\n      w && b.setZIndex(w);\n    }, [b, w]), u(b, \"mouseover\", l), u(b, \"mouseout\", i), u(b, \"mousemove\", a), u(b, \"mousedown\", n), u(b, \"click\", t), null;\n  }),\n  A = e.forwardRef(({\n    bounds: e,\n    onClick: t,\n    onMousedown: n,\n    onMousemove: a,\n    onMouseout: i,\n    onMouseover: l,\n    onCreate: d,\n    strokeColor: c,\n    strokeOpacity: p,\n    strokeStyle: k,\n    strokeWeight: m,\n    fillColor: g,\n    fillOpacity: h,\n    zIndex: w\n  }, f) => {\n    const C = v(\"Rectangle\"),\n      y = s(() => new kakao.maps.LatLngBounds(new kakao.maps.LatLng(e.sw.lat, e.sw.lng), new kakao.maps.LatLng(e.ne.lat, e.ne.lng)), [e]),\n      b = s(() => new kakao.maps.Rectangle({\n        bounds: y,\n        fillColor: g,\n        fillOpacity: h,\n        strokeColor: c,\n        strokeOpacity: p,\n        strokeStyle: k,\n        strokeWeight: m,\n        zIndex: w\n      }), []);\n    return r(f, () => b, [b]), o(() => (b.setMap(C), () => b.setMap(null)), [C, b]), o(() => {\n      d && d(b);\n    }, [b, d]), o(() => {\n      b.setOptions({\n        fillColor: g,\n        fillOpacity: h,\n        strokeColor: c,\n        strokeOpacity: p,\n        strokeStyle: k,\n        strokeWeight: m\n      });\n    }, [b, g, h, c, p, k, m]), o(() => {\n      b.setBounds(y);\n    }, [b, y]), o(() => {\n      w && b.setZIndex(w);\n    }, [b, w]), u(b, \"mouseover\", l), u(b, \"mouseout\", i), u(b, \"mousemove\", a), u(b, \"mousedown\", n), u(b, \"click\", t), null;\n  }),\n  D = e.forwardRef(({\n    center: e,\n    rx: t,\n    ry: n,\n    fillColor: a,\n    fillOpacity: i,\n    strokeColor: l,\n    strokeOpacity: d,\n    strokeStyle: c,\n    strokeWeight: p,\n    zIndex: k,\n    onMouseover: m,\n    onMouseout: g,\n    onMousemove: h,\n    onMousedown: w,\n    onClick: f,\n    onCreate: C\n  }, y) => {\n    const b = v(\"Ellipse\"),\n      I = s(() => new kakao.maps.LatLng(e.lat, e.lng), [e.lat, e.lng]),\n      M = s(() => new kakao.maps.Ellipse({\n        center: I,\n        rx: t,\n        ry: n,\n        fillColor: a,\n        fillOpacity: i,\n        strokeColor: l,\n        strokeOpacity: d,\n        strokeStyle: c,\n        strokeWeight: p,\n        zIndex: k\n      }), []);\n    return r(y, () => M, [M]), o(() => (M.setMap(b), () => {\n      M.setMap(null);\n    }), [b, M]), o(() => {\n      C && C(M);\n    }, [M, C]), o(() => {\n      M && M.setPosition(I);\n    }, [M, I]), o(() => {\n      M.setRadius(t, n);\n    }, [M, t, n]), o(() => {\n      k && M.setZIndex(k);\n    }, [M, k]), o(() => {\n      M.setOptions({\n        fillColor: a,\n        fillOpacity: i,\n        strokeColor: l,\n        strokeOpacity: d,\n        strokeStyle: c,\n        strokeWeight: p\n      });\n    }, [M, a, i, l, d, c, p]), u(M, \"mouseover\", m), u(M, \"mouseout\", g), u(M, \"mousemove\", h), u(M, \"mousedown\", w), u(M, \"click\", f), null;\n  }),\n  T = e.forwardRef(({\n    draw: e,\n    onAdd: t,\n    onRemove: n,\n    onCreate: a\n  }, i) => {\n    const l = v(),\n      d = s(() => {\n        class o extends kakao.maps.AbstractOverlay {\n          constructor(e, o, t) {\n            super(), this.draw = e, this.onAdd = o, this.onRemove = t;\n          }\n        }\n        return new o(e, t, n);\n      }, [e, t, n]);\n    return r(i, () => d, [d]), o(() => (d.setMap(l), () => {\n      d.setMap(null);\n    }), [l, d]), o(() => {\n      a && a(d);\n    }, [d, a]), null;\n  }),\n  Z = [\"id\", \"as\", \"children\", \"position\", \"pan\", \"panoId\", \"panoX\", \"panoY\", \"tilt\", \"zoom\", \"onCreate\", \"onInit\", \"onPanoidChange\", \"onPositionChanged\", \"onViewpointChange\", \"onErrorGetNearestPanoId\"],\n  W = e.createContext(void 0),\n  N = e.forwardRef((o, t) => {\n    let {\n        id: i,\n        as: s,\n        children: l,\n        position: k,\n        pan: g,\n        panoId: h,\n        panoX: w,\n        panoY: v,\n        tilt: f,\n        zoom: C,\n        onCreate: y,\n        onInit: b,\n        onPanoidChange: I,\n        onPositionChanged: M,\n        onViewpointChange: L,\n        onErrorGetNearestPanoId: O\n      } = o,\n      x = c(o, Z);\n    const S = s || \"div\",\n      [E, z] = n(!1),\n      [P, R] = n(!0),\n      [A, D] = n(),\n      T = a(null);\n    return p(() => {\n      m.isLoaded().then(z);\n    }, []), p(() => {\n      if (!E) return;\n      const e = T.current;\n      if (!e) return;\n      const o = new kakao.maps.Roadview(e, {\n        pan: g,\n        panoId: h,\n        panoX: w,\n        panoY: v,\n        tilt: f,\n        zoom: C\n      });\n      return D(o), () => {\n        e.innerHTML = \"\";\n      };\n    }, [E, w, v, C]), r(t, () => A, [A]), p(() => {\n      A && y && y(A);\n    }, [A, y]), p(() => {\n      if (!A || h || A.getPosition().getLat() === k.lat && A.getPosition().getLng() === k.lng) return;\n      const e = new kakao.maps.LatLng(k.lat, k.lng);\n      new kakao.maps.RoadviewClient().getNearestPanoId(e, k.radius, o => {\n        null === o && O ? O(A) : A.setPanoId(o, e);\n      });\n    }, [A, h, k.lat, k.lng, k.radius, O]), p(() => {\n      if (!A || !h || h === A.getPanoId() || A.getPosition().getLat() === k.lat && A.getPosition().getLng() === k.lng) return;\n      const e = new kakao.maps.LatLng(k.lat, k.lng);\n      A.setPanoId(h, e);\n    }, [A, h, k.lat, k.lng]), p(() => {\n      if (!A) return;\n      const e = A.getViewpoint();\n      e.pan === g && e.tilt === f || (g && (e.pan = g), f && (e.tilt = f), A.setViewpoint(e));\n    }, [A, g, f]), u(A, \"init\", e => {\n      R(!1), b && b(e);\n    }), u(A, \"panoid_changed\", I), u(A, \"viewpoint_changed\", L), u(A, \"position_changed\", M), e.createElement(e.Fragment, null, e.createElement(S, d({\n      ref: T,\n      id: i || \"react-kakao-maps-sdk-roadview-container\"\n    }, x)), A && !P && e.createElement(W.Provider, {\n      value: A\n    }, l));\n  }),\n  j = e => {\n    const o = i(W);\n    if (!o) throw new Error((e ? e + \" Component\" : \"useRoadview\") + \" must exist inside Roadview Component!\");\n    return o;\n  },\n  _ = e.forwardRef(({\n    position: e,\n    children: t,\n    clickable: n,\n    xAnchor: i,\n    yAnchor: d,\n    zIndex: c,\n    altitude: p,\n    range: u,\n    onCreate: k\n  }, m) => {\n    const g = j(\"CustomOverlayRoadview\"),\n      h = a(document.createElement(\"div\")),\n      w = s(() => \"lat\" in e ? new kakao.maps.LatLng(e.lat, e.lng) : new kakao.maps.Viewpoint(e.pan, e.tilt, e.zoom, e.panoId), [e.lat, e.lng, e.pan, e.tilt, e.zoom, e.panoId]),\n      v = s(() => {\n        const e = new kakao.maps.CustomOverlay({\n          clickable: n,\n          xAnchor: i,\n          yAnchor: d,\n          zIndex: c,\n          position: w,\n          content: h.current\n        });\n        return h.current.style.display = \"none\", e;\n      }, [n, i, d]);\n    return r(m, () => v, [v]), o(() => {\n      if (g) return v.setMap(g), () => {\n        v.setMap(null);\n      };\n    }, [v, g]), o(() => {\n      k && k(v);\n    }, [v, k]), o(() => {\n      v.setPosition(w);\n    }, [v, w]), o(() => {\n      c && v.setZIndex(c);\n    }, [v, c]), o(() => {\n      p && v.setAltitude(p);\n    }, [v, p]), o(() => {\n      u && v.setRange(u);\n    }, [v, u]), h.current.parentElement && l.createPortal(t, h.current.parentElement);\n  }),\n  F = e.forwardRef(({\n    image: o,\n    position: t,\n    children: n,\n    altitude: a,\n    clickable: r,\n    infoWindowOptions: i,\n    onClick: l,\n    onDragEnd: d,\n    onDragStart: c,\n    onMouseOut: p,\n    onMouseOver: u,\n    onCreate: k,\n    opacity: m,\n    range: g,\n    title: h,\n    zIndex: w\n  }, v) => {\n    const f = j(\"RoadviewMarker\"),\n      C = s(() => {\n        var e, t, n, a, r, i, s, l, d, c, p, u;\n        return o && new kakao.maps.MarkerImage(o.src, new kakao.maps.Size(o.size.width, o.size.height), {\n          alt: null == (e = o.options) ? void 0 : e.alt,\n          coords: null == (t = o.options) ? void 0 : t.coords,\n          offset: (null == (n = o.options) ? void 0 : n.offset) && new kakao.maps.Point(null == (a = o.options) ? void 0 : a.offset.x, null == (r = o.options) ? void 0 : r.offset.y),\n          shape: null == (i = o.options) ? void 0 : i.shape,\n          spriteOrigin: (null == (s = o.options) ? void 0 : s.spriteOrigin) && new kakao.maps.Point(null == (l = o.options) ? void 0 : l.spriteOrigin.x, null == (d = o.options) ? void 0 : d.spriteOrigin.y),\n          spriteSize: (null == (c = o.options) ? void 0 : c.spriteSize) && new kakao.maps.Size(null == (p = o.options) ? void 0 : p.spriteSize.width, null == (u = o.options) ? void 0 : u.spriteSize.height)\n        });\n      }, [o]),\n      y = s(() => \"lat\" in t ? new kakao.maps.LatLng(t.lat, t.lng) : \"x\" in t ? new kakao.maps.Coords(t.x, t.y).toLatLng() : new kakao.maps.Viewpoint(t.pan, t.tilt, t.zoom, t.panoId), [t.lat, t.lng, t.x, t.y, t.pan, t.tilt, t.zoom, null == t ? void 0 : t.panoId]);\n    return e.createElement(I, {\n      map: f,\n      position: y,\n      image: C,\n      altitude: a,\n      clickable: r,\n      infoWindowOptions: i,\n      onClick: l,\n      onDragEnd: d,\n      onDragStart: c,\n      onMouseOut: p,\n      onMouseOver: u,\n      onCreate: k,\n      opacity: m,\n      range: g,\n      title: h,\n      zIndex: w,\n      ref: v\n    }, n);\n  }),\n  G = e.forwardRef(({\n    position: o,\n    children: t,\n    altitude: n,\n    disableAutoPan: a,\n    range: r,\n    removable: i,\n    zIndex: l,\n    onCreate: d\n  }, c) => {\n    const p = j(\"RoadviewInfoWindow\"),\n      u = s(() => \"lat\" in o ? new kakao.maps.LatLng(o.lat, o.lng) : new kakao.maps.Viewpoint(o.pan, o.tilt, o.zoom, o.panoId), [o.lat, o.lng, o.pan, o.tilt, o.zoom, o.panoId]);\n    return e.createElement(f, {\n      altitude: n,\n      disableAutoPan: a,\n      range: r,\n      removable: i,\n      zIndex: l,\n      map: p,\n      position: u,\n      onCreate: d,\n      ref: c\n    }, t);\n  }),\n  U = e.createContext(void 0);\nfunction V(e, t, n) {\n  o(() => {\n    e && n && e.addListener(t, (...o) => void 0 === o ? n(e) : n(e, ...o));\n  }, [n, e, t]);\n}\nconst B = e.forwardRef(function ({\n    arrowOptions: t,\n    circleOptions: n,\n    ellipseOptions: a,\n    markerOptions: i,\n    polygonOptions: l,\n    polylineOptions: d,\n    rectangleOptions: c,\n    drawingMode: p,\n    guideTooltip: u,\n    onSelect: k,\n    onDrawstart: m,\n    onDraw: g,\n    onDrawend: h,\n    onDrawnext: w,\n    onCancle: f,\n    onRemove: C,\n    onStateChanged: y,\n    onCreate: b,\n    children: I\n  }, M) {\n    const L = v(\"Toolbox\"),\n      O = s(() => {\n        if (window.kakao.maps.drawing) return new kakao.maps.drawing.DrawingManager({\n          map: L,\n          drawingMode: p,\n          guideTooltip: u,\n          arrowOptions: t,\n          circleOptions: n,\n          ellipseOptions: a,\n          markerOptions: i,\n          polygonOptions: l,\n          polylineOptions: d,\n          rectangleOptions: c\n        });\n        console.warn(\"drawing 라이브러리를 별도 로드 해야 사용 가능합니다. `https://apis.map.kakao.com/web/guide/#loadlibrary`\");\n      }, []);\n    return r(M, () => O, [O]), o(() => {\n      O && b && b(O);\n    }, [O, b]), V(O, \"select\", k), V(O, \"drawstart\", m), V(O, \"draw\", g), V(O, \"drawend\", h), V(O, \"drawnext\", w), V(O, \"cancel\", f), V(O, \"remove\", C), V(O, \"state_changed\", y), O ? e.createElement(U.Provider, {\n      value: O\n    }, I) : null;\n  }),\n  $ = e.forwardRef(function ({\n    position: e\n  }, t) {\n    e = e || kakao.maps.ControlPosition.TOP;\n    const n = v(\"Toolbox\"),\n      a = i(U);\n    if (!a) throw new Error(\"Toolbox must exist inside DrawingManager Component!`\");\n    const l = s(() => new kakao.maps.drawing.Toolbox({\n      drawingManager: a\n    }), [a]);\n    return r(t, () => l, [l]), o(() => {\n      const o = l.getElement();\n      return n.addControl(o, e), () => {\n        n.removeControl(o);\n      };\n    }, [n, l, e]), null;\n  }),\n  q = e.forwardRef(({\n    id: o = \"react-kakao-maps-sdk-staticmap-container\",\n    style: t,\n    className: i,\n    center: s,\n    marker: l,\n    level: c,\n    mapTypeId: u,\n    onCreate: k\n  }, m) => {\n    const [g, h] = n(),\n      w = a(null);\n    return p(() => {\n      if (!window.kakao) return void console.warn(\"kakao map javascript api를 먼저 불러와야 합니다. `https://apis.map.kakao.com/web/guide`\");\n      const e = w.current;\n      e && kakao.maps.load(() => {\n        const o = Array.isArray(l) ? l.map(e => d({}, e, {\n            position: new kakao.maps.LatLng(e.position.lat, e.position.lng)\n          })) : \"object\" == typeof l && l.position ? d({}, l, {\n            position: new kakao.maps.LatLng(l.position.lat, l.position.lng)\n          }) : l,\n          t = new kakao.maps.StaticMap(e, {\n            center: new kakao.maps.LatLng(s.lat, s.lng),\n            level: c,\n            mapTypeId: u,\n            marker: o\n          });\n        h(t);\n      });\n    }, [JSON.stringify(l)]), r(m, () => g, [g]), p(() => {\n      g && g.setCenter(new kakao.maps.LatLng(s.lat, s.lng));\n    }, [g, s.lat, s.lng]), p(() => {\n      g && c && g.setLevel(c);\n    }, [g, c]), p(() => {\n      g && u && g.setMapTypeId(u);\n    }, [g, u]), p(() => {\n      g && k && k(g);\n    }, [g, k]), e.createElement(\"div\", {\n      id: o,\n      style: t,\n      className: i,\n      ref: w\n    });\n  }),\n  H = e => {\n    const [o, a] = n({\n        loading: !0,\n        error: void 0\n      }),\n      r = s(() => new m(e), [JSON.stringify(e)]);\n    return t(() => {\n      r.load().then(() => a({\n        loading: !1,\n        error: void 0\n      })).catch(e => a({\n        loading: !1,\n        error: e\n      }));\n    }, [r]), o;\n  };\nexport { T as AbstractOverlay, z as Circle, O as CustomOverlayMap, _ as CustomOverlayRoadview, B as DrawingManager, D as Ellipse, m as Loader, w as Map, L as MapInfoWindow, M as MapMarker, x as MapTypeControl, E as MapTypeId, y as MarkerClusterer, R as Polygon, P as Polyline, A as Rectangle, N as Roadview, G as RoadviewInfoWindow, F as RoadviewMarker, q as StaticMap, $ as Toolbox, S as ZoomControl, H as useInjectKakaoMapApi, v as useMap, j as useRoadview };","map":{"version":3,"names":["p","window","document","o","t","u","useKakaoEvent","e","n","wrapCallback","kakao","maps","event","addListener","removeListener","k","INITIALIZED","LOADING","SUCCESS","FAILURE","m","constructor","appkey","id","libraries","nonce","retries","a","url","r","callbacks","done","loading","errors","onerrorEvent","instance","equalOptions","options","Error","JSON","stringify","isLoaded","Promise","status","loadcheckcallbacks","push","load","loadCallback","error","failed","length","execute","resetIfRetryingFailed","reset","deleteScript","callback","console","warn","setScript","getElementById","createUrl","createElement","type","src","onerror","loadErrorCallback","bind","onload","defer","async","head","appendChild","source","lineno","colno","log","setTimeout","join","remove","forEach","g","h","createContext","w","forwardRef","i","as","s","children","l","center","isPanto","padding","v","disableDoubleClick","f","disableDoubleClickZoom","C","draggable","y","zoomable","b","keyboardShortcuts","I","level","M","maxLevel","L","minLevel","O","mapTypeId","x","projectionId","S","scrollwheel","E","tileAnimation","z","onBoundsChanged","P","onCenterChanged","R","onClick","A","onDoubleClick","D","onDrag","T","onDragEnd","Z","onDragStart","W","onIdle","N","onMaptypeidChanged","j","onMouseMove","_","onRightClick","F","onTileLoaded","G","onZoomChanged","U","onZoomStart","V","onCreate","B","$","c","q","H","J","K","X","Y","then","current","LatLng","lat","lng","Coords","Map","innerHTML","getCenter","toLatLng","equals","panTo","setCenter","setDraggable","setZoomable","setKeyboardShortcuts","setLevel","setMapTypeId","setProjectionId","setMaxLevel","setMinLevel","Fragment","d","ref","Provider","value","map","position","marker","altitude","disableAutoPan","range","removable","zIndex","InfoWindow","content","style","display","open","close","setPosition","setAltitude","setRange","setZIndex","parentElement","createPortal","averageCenter","calculator","clickable","disableClickZoom","gridSize","hoverable","minClusterSize","styles","texts","onClusterclick","onClusterdblclick","onClustered","onClusterout","onClusterover","onClusterrightclick","MarkerClusterer","setMap","setGridSize","redraw","setMinClusterSize","setAverageCenter","setTexts","setCalculator","setStyles","MarkerClustererRedraw","image","infoWindowOptions","onMouseOut","onMouseOver","opacity","title","Marker","addMarker","removeMarker","setImage","setClickable","setOpacity","setTitle","MarkerImage","Size","size","width","height","alt","coords","offset","Point","shape","spriteOrigin","spriteSize","xAnchor","yAnchor","CustomOverlay","ControlPosition","TOPRIGHT","MapTypeControl","addControl","removeControl","RIGHT","ZoomControl","MapTypeId","addOverlayMapTypeId","removeOverlayMapTypeId","radius","fillColor","fillOpacity","strokeColor","strokeOpacity","strokeStyle","strokeWeight","onMouseover","onMouseout","onMousemove","onMousedown","Circle","setRadius","setOptions","path","endArrow","every","Array","Polyline","setPath","Polygon","bounds","LatLngBounds","sw","ne","Rectangle","setBounds","rx","ry","Ellipse","draw","onAdd","onRemove","AbstractOverlay","pan","panoId","panoX","panoY","tilt","zoom","onInit","onPanoidChange","onPositionChanged","onViewpointChange","onErrorGetNearestPanoId","Roadview","getPosition","getLat","getLng","RoadviewClient","getNearestPanoId","setPanoId","getPanoId","getViewpoint","setViewpoint","Viewpoint","arrowOptions","circleOptions","ellipseOptions","markerOptions","polygonOptions","polylineOptions","rectangleOptions","drawingMode","guideTooltip","onSelect","onDrawstart","onDraw","onDrawend","onDrawnext","onCancle","onStateChanged","drawing","DrawingManager","TOP","Toolbox","drawingManager","getElement","className","isArray","StaticMap","catch","CustomOverlayMap","CustomOverlayRoadview","Loader","MapInfoWindow","MapMarker","RoadviewInfoWindow","RoadviewMarker","useInjectKakaoMapApi","useMap","useRoadview"],"sources":["C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\hooks\\useIsomorphicLayoutEffect.tsx","C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\hooks\\useKakaoEvent.tsx","C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\util\\kakaoMapApiLoader.ts","C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\components\\Map.tsx","C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\hooks\\useMap.tsx","C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\components\\InfoWindow.tsx","C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\components\\MarkerClusterer.tsx","C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\components\\Marker.tsx","C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\components\\MapMarker.tsx","C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\components\\MapInfoWindow.tsx","C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\components\\CustomOverlayMap.tsx","C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\components\\MapTypeControl.tsx","C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\components\\ZoomControl.tsx","C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\components\\MapTypeId.tsx","C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\components\\Circle.tsx","C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\components\\Polyline.tsx","C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\components\\Polygon.tsx","C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\components\\Rectangle.tsx","C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\components\\Ellipse.tsx","C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\components\\AbstractOverlay.tsx","C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\components\\Roadview.tsx","C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\hooks\\useRoadview.tsx","C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\components\\CustomOverlayRoadview.tsx","C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\components\\RoadviewMarker.tsx","C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\components\\RoadviewInfoWindow.tsx","C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\components\\DrawingManager.tsx","C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\components\\Toolbox.tsx","C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\components\\StaticMap.tsx","C:\\K3MiniProject\\project_front\\my_mini_project\\node_modules\\react-kakao-maps-sdk\\src\\hooks\\useInjectKakaoMapApi.tsx"],"sourcesContent":["import { useEffect, useLayoutEffect } from \"react\"\n\nconst useIsomorphicLayoutEffect =\n  typeof window !== \"undefined\" && typeof document !== \"undefined\"\n    ? useLayoutEffect\n    : useEffect\n\nexport default useIsomorphicLayoutEffect\n","import useIsomorphicLayoutEffect from \"./useIsomorphicLayoutEffect\"\n\nconst useKakaoEvent = <T extends kakao.maps.event.EventTarget>(\n  /**\n   * 이벤트 타겟\n   */\n  target: T | undefined,\n  /**\n   * event 타입\n   */\n  type: \"center_changed\"|\"zoom_start\"|\"zoom_changed\"|\"bounds_changed\"|\"click\"|\"dblclick\"|\"rightclick\"|\"mouseover\"|\"mouseout\"|\"mousemove\"|\"mousedown\"|\"dragstart\"|\"drag\"|\"dragend\"|\"idle\"|\"tilesloaded\"|\"maptypeid_changed\"|\"clusterclick\"|\"clusterover\"|\"clusterout\"|\"clusterdblclick\"|\"clusterrightclick\"|\"clustered\"|\"init\"|\"panoid_changed\"|\"viewpoint_changed\"|\"position_changed\",\n  /**\n   * 호출될 callback\n   */\n  callback: ((target: T, ...args: any[]) => void) | undefined\n) => {\n  useIsomorphicLayoutEffect(() => {\n    if (!target || !callback) return\n\n    const wrapCallback = (...arg: any[]) => {\n      if (arg === undefined) return callback(target)\n      else return callback(target, ...arg)\n    }\n\n    kakao.maps.event.addListener(target, type, wrapCallback)\n\n    return () => {\n      kakao.maps.event.removeListener(target, type, wrapCallback)\n    }\n  }, [target, type, callback])\n}\n\nexport default useKakaoEvent\n","export type Libraries = (\"services\" | \"clusterer\" | \"drawing\")[]\n\nexport interface LoaderOptions {\n  /**\n   * script 객체 생성시 사용자 정의 id\n   */\n  id?: string\n  /**\n   * 발급 받은 Kakao 지도 Javscript API 키.\n   *\n   * @see [준비하기](https://apis.map.kakao.com/web/guide/#ready)\n   */\n  appkey: string\n  /**\n   * 사용하는 라이브러리 목록\n   *\n   * Kakao 지도 Javascript API 는 지도와 함께 사용할 수 있는 라이브러리 를 지원하고 있습니다.\n   * 라이브러리는 javascript API와 관련되어 있지만 조금 특화된 기능을 묶어둔 것을 말합니다. 이 기능은 추가로 불러와서 사용할 수 있도록 되어있습니다.\n   * 현재 사용할 수 있는 라이브러리는 다음과 같습니다.\n   *\n   * clusterer: 마커를 클러스터링 할 수 있는 클러스터러 라이브러리 입니다.\n   * services: 장소 검색 과 주소-좌표 변환 을 할 수 있는 services 라이브러리 입니다.\n   * drawing: 지도 위에 마커와 그래픽스 객체를 쉽게 그릴 수 있게 그리기 모드를 지원하는 drawing 라이브러리 입니다.\n   * 라이브러리는 계속해서 추가될 예정입니다.\n   */\n  libraries?: Libraries\n  /**\n   * 사용자 정의 Kakao 지도 javascript 경로 지정\n   *\n   * @default \"//dapi.kakao.com/v2/maps/sdk.js\"\n   */\n  url?: string\n  /**\n   * 보안을 위한 nonce 값 설정\n   */\n  nonce?: string\n  /**\n   * 스크립트 로드 재시도 횟수\n   */\n  retries?: number\n}\n\nexport enum LoaderStatus {\n  INITIALIZED,\n  LOADING,\n  SUCCESS,\n  FAILURE,\n}\n\nconst DEFAULT_ID = \"__reactKakaoMapsSdkloaderId\"\n\n/**\n * Kakao Map Api Loader\n *\n * `new Loader(options).load()` 함수를 이용하여 Api를 비동기적으로 삽입할 수 있습니다.\n *\n * 해당 Loader를 이용시 `react-kakao-maps-sdk` 내부에서 injection 되는 이벤트를 감지하여 kakao map api 로딩 이후에 렌더링을 진행합니다.\n */\nexport class Loader {\n  private static instance: Loader\n  private static loadcheckcallbacks: ((e?: ErrorEvent) => void)[] = []\n\n  public readonly id: string\n  public readonly appkey: string\n  public readonly url: string\n  public readonly libraries: Libraries\n  public readonly nonce: string | undefined\n  public readonly retries: number\n\n  private callbacks: ((e?: ErrorEvent) => void)[] = []\n  private done = false\n  private loading = false\n  private errors: ErrorEvent[] = []\n  private onerrorEvent: ErrorEvent | undefined\n\n  constructor({\n    appkey,\n    id = DEFAULT_ID,\n    libraries = [],\n    nonce,\n    retries = 3,\n    url = \"//dapi.kakao.com/v2/maps/sdk.js\",\n  }: LoaderOptions) {\n    this.id = id\n    this.appkey = appkey\n    this.libraries = libraries\n    this.nonce = nonce\n    this.retries = retries\n    this.url = url\n\n    if (Loader.instance) {\n      if (!Loader.equalOptions(this.options, Loader.instance.options)) {\n        throw new Error(\n          `Loader must not be called again with different options. ${JSON.stringify(\n            this.options\n          )} !== ${JSON.stringify(Loader.instance.options)}`\n        )\n      }\n\n      return Loader.instance\n    }\n    Loader.instance = this\n  }\n\n  public get options() {\n    return {\n      appkey: this.appkey,\n      id: this.id,\n      libraries: this.libraries,\n      nonce: this.nonce,\n      retries: this.retries,\n      url: this.url,\n    }\n  }\n\n  public static isLoaded(): Promise<boolean> {\n    return new Promise((resolve) => {\n      if (!Loader.instance) {\n        if (window.kakao && window.kakao.maps) {\n          return window.kakao.maps.load(() => {\n            resolve(true)\n          })\n        }\n        return Loader.loadcheckcallbacks.push((e) => {\n          resolve(!e)\n        })\n      }\n\n      if (\n        Loader.instance.status === LoaderStatus.FAILURE ||\n        Loader.instance.status === LoaderStatus.INITIALIZED\n      ) {\n        return resolve(false)\n      }\n\n      if (Loader.instance.status === LoaderStatus.LOADING) {\n        Loader.loadcheckcallbacks.push((e) => resolve(!e))\n      }\n\n      return resolve(true)\n    })\n  }\n\n  public load(): Promise<typeof kakao> {\n    return new Promise((resolve, reject) => {\n      this.loadCallback((err?: ErrorEvent) => {\n        if (!err) {\n          resolve(window.kakao)\n        } else {\n          reject(err.error)\n        }\n      })\n    })\n  }\n\n  public get status(): LoaderStatus {\n    if (this.onerrorEvent) {\n      return LoaderStatus.FAILURE\n    }\n    if (this.done) {\n      return LoaderStatus.SUCCESS\n    }\n    if (this.loading) {\n      return LoaderStatus.LOADING\n    }\n    return LoaderStatus.INITIALIZED\n  }\n\n  private get failed(): boolean {\n    return this.done && !this.loading && this.errors.length >= this.retries + 1\n  }\n\n  private loadCallback(fn: (e?: ErrorEvent) => void): void {\n    this.callbacks.push(fn)\n    this.execute()\n  }\n\n  private resetIfRetryingFailed(): void {\n    if (this.failed) {\n      this.reset()\n    }\n  }\n\n  private reset(): void {\n    this.deleteScript()\n    this.done = false\n    this.loading = false\n    this.errors = []\n    this.onerrorEvent = undefined\n  }\n\n  private execute() {\n    this.resetIfRetryingFailed()\n\n    if (this.done) {\n      this.callback()\n    } else {\n      if (window.kakao && window.kakao.maps) {\n        console.warn(\n          \"Kakao Maps이 이미 외부 요소에 의해 로딩되어 있습니다.\" +\n            \"설정한 옵션과 일치 하지 않을 수 있으며, 이에 따른 예상치 동작이 발생할 수 있습니다.\"\n        )\n        window.kakao.maps.load(this.callback);\n        return\n      }\n\n      if (!this.loading) {\n        this.loading = true\n        this.setScript()\n      }\n    }\n  }\n\n  private setScript() {\n    if (document.getElementById(this.id)) {\n      this.callback()\n    }\n\n    const url = this.createUrl()\n    const script = document.createElement(\"script\")\n\n    script.id = this.id\n    script.type = \"text/javascript\"\n    script.src = url\n    script.onerror = this.loadErrorCallback.bind(this)\n    script.onload = this.callback.bind(this)\n    script.defer = true\n    script.async = true\n\n    if (this.nonce) {\n      script.nonce = this.nonce\n    }\n\n    document.head.appendChild(script)\n  }\n\n  private loadErrorCallback(\n    event: Event | string,\n    source?: string,\n    lineno?: number,\n    colno?: number,\n    error?: Error\n  ): void {\n    this.errors.push({\n      event,\n      source,\n      // @ts-ignore\n      lineno,\n      // @ts-ignore\n      colno,\n      error,\n    })\n\n    if (this.errors.length <= this.retries) {\n      const delay = this.errors.length * 2 ** this.errors.length\n\n      console.log(`Failed to load Kakao Maps script, retrying in ${delay} ms.`)\n\n      setTimeout(() => {\n        this.deleteScript()\n        this.setScript()\n      }, delay)\n    } else {\n      this.onerrorEvent = this.errors[this.errors.length - 1]\n      this.callback()\n    }\n  }\n\n  public createUrl(): string {\n    let url = this.url\n    url += `?appkey=${this.appkey}`\n\n    if (this.libraries.length) {\n      url += `&libraries=${this.libraries.join(\",\")}`\n    }\n\n    url += `&autoload=false`\n\n    return url\n  }\n\n  private deleteScript() {\n    const script = document.getElementById(this.id)\n    if (script) {\n      script.remove()\n    }\n  }\n\n  private callback() {\n    kakao.maps.load(() => {\n      this.done = true\n      this.loading = false\n\n      this.callbacks.forEach((cb) => {\n        cb(this.onerrorEvent)\n      })\n      this.callbacks = []\n\n      Loader.loadcheckcallbacks.forEach((cb) => {\n        cb(this.onerrorEvent)\n      })\n      Loader.loadcheckcallbacks = []\n    })\n  }\n\n  private static equalOptions(\n    a: typeof Loader.prototype.options,\n    b: typeof Loader.prototype.options\n  ): boolean {\n    if (a.appkey !== b.appkey) return false\n    if (a.id !== b.id) return false\n\n    if (a.libraries.length !== b.libraries.length) return false\n    for (let i = 0; i < a.libraries.length; ++i) {\n      if (a.libraries[i] !== b.libraries[i]) return false\n    }\n    if (a.nonce !== b.nonce) return false\n    if (a.retries !== b.retries) return false\n    if (a.url !== b.url) return false\n    return true\n  }\n}\n","import React, { useRef, useState, useImperativeHandle } from \"react\"\nimport useIsomorphicLayoutEffect from \"../hooks/useIsomorphicLayoutEffect\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport { PolymorphicComponentPropsWithOutRef } from \"../types\"\nimport { Loader } from \"../util/kakaoMapApiLoader\"\n\nexport const KakaoMapContext = React.createContext<kakao.maps.Map>(\n  undefined as unknown as kakao.maps.Map\n)\n\nexport type MapProps = {\n  /**\n   * 중심으로 설정할 위치 입니다.\n   */\n  center:\n    | {\n        lat: number\n        lng: number\n      }\n    | {\n        x: number\n        y: number\n      }\n\n  /**\n   * 중심을 이동시킬때 Panto를 사용할지 정합니다.\n   * @default false\n   */\n  isPanto?: boolean\n\n  /**\n   * 중심 좌표를 지정한 좌표 또는 영역으로 부드럽게 이동한다. 필요하면 확대 또는 축소도 수행한다.\n   * 만약 이동할 거리가 지도 화면의 크기보다 클 경우 애니메이션 없이 이동한다.\n   * padding 만큼 제외하고 영역을 계산하며, padding 을 지정하지 않으면 기본값으로 32가 사용된다.\n   */\n  padding?: number\n\n  /**\n   * 확대 수준 (기본값: 3)\n   */\n  level?: number\n\n  /**\n   * 최대 확대 수준\n   */\n  maxLevel?: number\n\n  /**\n   * 최소 확대 수준\n   */\n  minLevel?: number\n\n  /**\n   * 지도 종류 (기본값: 일반 지도)\n   */\n  mapTypeId?: kakao.maps.MapTypeId\n\n  /**\n   * 마우스 드래그, 휠, 모바일 터치를 이용한 시점 변경(이동, 확대, 축소) 가능 여부\n   */\n  draggable?: boolean\n\n  /**\n   * 마우스 휠이나 멀티터치로 지도 확대, 축소 기능을 막습니다. 상황에 따라 지도 확대, 축소 기능을 제어할 수 있습니다.\n   */\n  zoomable?: boolean\n\n  /**\n   * 마우스 휠, 모바일 터치를 이용한 확대 및 축소 가능 여부\n   */\n  scrollwheel?: boolean\n\n  /**\n   * 더블클릭 이벤트 및 더블클릭 확대 가능 여부\n   */\n  disableDoubleClick?: boolean\n\n  /**\n   * 더블클릭 확대 가능 여부\n   */\n  disableDoubleClickZoom?: boolean\n\n  /**\n   * 투영법 지정 (기본값: kakao.maps.ProjectionId.WCONG)\n   */\n  projectionId?: string\n\n  /**\n   * 지도 타일 애니메이션 설정 여부 (기본값: true)\n   */\n  tileAnimation?: boolean\n\n  /**\n   * 키보드의 방향키와 +, – 키로 지도 이동,확대,축소 가능 여부 (기본값: false)\n   */\n  keyboardShortcuts?:\n    | boolean\n    | {\n        /**\n         * 지도 이동 속도\n         */\n        speed: number\n      }\n\n  /**\n   * map 생성 후 해당 객체를 전달하는 함수\n   */\n  onCreate?: (map: kakao.maps.Map) => void\n\n  /**\n   * 중심 좌표가 변경되면 발생한다.\n   */\n  onCenterChanged?: (target: kakao.maps.Map) => void\n\n  /**\n   * 확대 수준이 변경되기 직전 발생한다.\n   */\n  onZoomStart?: (target: kakao.maps.Map) => void\n\n  /**\n   * 확대 수준이 변경되면 발생한다.\n   */\n  onZoomChanged?: (target: kakao.maps.Map) => void\n\n  /**\n   * 지도 영역이 변경되면 발생한다.\n   */\n  onBoundsChanged?: (target: kakao.maps.Map) => void\n\n  /**\n   * 지도를 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 지도를 더블클릭하면 발생한다.\n   */\n  onDoubleClick?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 지도를 마우스 오른쪽 버튼으로 클릭하면 발생한다.\n   */\n  onRightClick?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 지도에서 마우스 커서를 이동하면 발생한다.\n   */\n  onMouseMove?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 드래그를 시작할 때 발생한다.\n   */\n  onDragStart?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 드래그를 하는 동안 발생한다.\n   */\n  onDrag?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 드래그가 끝날 때 발생한다.\n   */\n  onDragEnd?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 중심 좌표나 확대 수준이 변경되면 발생한다.\n   * 단, 애니메이션 도중에는 발생하지 않는다.\n   */\n  onIdle?: (target: kakao.maps.Map) => void\n\n  /**\n   * 확대수준이 변경되거나 지도가 이동했을때 타일 이미지 로드가 모두 완료되면 발생한다.\n   * 지도이동이 미세하기 일어나 타일 이미지 로드가 일어나지 않은경우 발생하지 않는다.\n   */\n  onTileLoaded?: (target: kakao.maps.Map) => void\n\n  /**\n   * 지도 기본 타일(일반지도, 스카이뷰, 하이브리드)이 변경되면 발생한다.\n   */\n  onMaptypeidChanged?: (target: kakao.maps.Map) => void\n\n  children?: React.ReactNode | undefined\n}\n\ntype MapComponent = <T extends React.ElementType = \"div\">(\n  props: PolymorphicComponentPropsWithOutRef<T, MapProps> &\n    React.RefAttributes<kakao.maps.Map>\n) => React.ReactElement | null\n\n/**\n * 기본적인 Map 객체를 생성하는 Comeponent 입니다.\n * props로 받는 `on*` 이벤트는 해당 `kakao.maps.Map` 객체를 함께 인자로 전달 합니다.\n *\n * `ref`를 통해 `map` 객체에 직접 접근하여 사용 또는 onCreate 이벤트를 이용하여 접근이 가능합니다.\n *\n * > *주의 사항* `Map`, `RoadView` 컴포넌트에 한하여, ref 객체가 컴포넌트 마운트 시점에 바로 초기화가 안될 수 있습니다.\n * >\n * > 컴포넌트 마운트 시점에 `useEffect` 를 활용하여, 특정 로직을 수행하고 싶은 경우 `ref` 객체를 사용하는 것보다\n * > `onCreate` 이벤트와 `useState`를 함께 활용하여 제어하는 것을 추천 드립니다.\n */\nconst Map: MapComponent = React.forwardRef(\n  <T extends React.ElementType = \"div\">(\n    {\n      id,\n      as,\n      children,\n      center,\n      isPanto = false,\n      padding = 32,\n      disableDoubleClick,\n      disableDoubleClickZoom,\n      draggable,\n      zoomable,\n      keyboardShortcuts,\n      level,\n      maxLevel,\n      minLevel,\n      mapTypeId,\n      projectionId,\n      scrollwheel,\n      tileAnimation,\n      onBoundsChanged,\n      onCenterChanged,\n      onClick,\n      onDoubleClick,\n      onDrag,\n      onDragEnd,\n      onDragStart,\n      onIdle,\n      onMaptypeidChanged,\n      onMouseMove,\n      onRightClick,\n      onTileLoaded,\n      onZoomChanged,\n      onZoomStart,\n      onCreate,\n      ...props\n    }: PolymorphicComponentPropsWithOutRef<T, MapProps>,\n    ref: React.ForwardedRef<kakao.maps.Map>\n  ) => {\n    const Container = as || \"div\"\n    const [isLoaded, setIsLoaded] = useState(false)\n    const [map, setMap] = useState<kakao.maps.Map>()\n    const container = useRef<HTMLDivElement>(null)\n\n    useIsomorphicLayoutEffect(() => {\n      Loader.isLoaded().then(setIsLoaded)\n    }, [])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!isLoaded) return\n\n      const MapContainer = container.current\n\n      if (!MapContainer) {\n        return\n      }\n\n      const initalMapCenter =\n        \"lat\" in center\n          ? new kakao.maps.LatLng(center.lat, center.lng)\n          : new kakao.maps.Coords(center.x, center.y)\n\n      const kakaoMap = new kakao.maps.Map(MapContainer, {\n        center: initalMapCenter,\n        disableDoubleClick: disableDoubleClick,\n        disableDoubleClickZoom: disableDoubleClickZoom,\n        draggable: draggable,\n        keyboardShortcuts: keyboardShortcuts,\n        level: level,\n        mapTypeId: mapTypeId,\n        projectionId: projectionId,\n        scrollwheel: scrollwheel,\n        tileAnimation: tileAnimation,\n      })\n\n      setMap(kakaoMap)\n\n      return () => {\n        MapContainer.innerHTML = \"\"\n      }\n    }, [\n      isLoaded,\n      disableDoubleClick,\n      disableDoubleClickZoom,\n      mapTypeId,\n      tileAnimation,\n    ])\n\n    useImperativeHandle(ref, () => map!, [map])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || !onCreate) return\n      onCreate(map)\n    }, [map, onCreate])\n\n    // center position 변경시 map center 변경\n    useIsomorphicLayoutEffect(() => {\n      if (!map) return\n\n      let prevCenter = map.getCenter()\n      if (prevCenter instanceof kakao.maps.Coords) {\n        prevCenter = prevCenter.toLatLng()\n      }\n\n      const centerPosition =\n        \"lat\" in center\n          ? new kakao.maps.LatLng(center.lat, center.lng)\n          : new kakao.maps.Coords(center.x, center.y)\n\n      if (\n        (centerPosition instanceof kakao.maps.LatLng &&\n          centerPosition.equals(prevCenter)) ||\n        (centerPosition instanceof kakao.maps.Coords &&\n          centerPosition.toLatLng().equals(prevCenter))\n      ) {\n        return\n      }\n\n      if (isPanto) {\n        map.panTo(centerPosition, padding)\n      } else {\n        map.setCenter(centerPosition)\n      }\n      // @ts-ignore\n    }, [map, center.lat, center.lng, center.x, center.y])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || typeof draggable === \"undefined\") return\n      map.setDraggable(draggable)\n    }, [map, draggable])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || typeof zoomable === \"undefined\") return\n      map.setZoomable(zoomable)\n    }, [map, zoomable])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || !keyboardShortcuts || typeof keyboardShortcuts !== \"boolean\")\n        return\n      map.setKeyboardShortcuts(keyboardShortcuts)\n    }, [map, keyboardShortcuts])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || !level) return\n      map.setLevel(level)\n    }, [map, level])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || !mapTypeId) return\n      map.setMapTypeId(mapTypeId)\n    }, [map, mapTypeId])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || !projectionId) return\n      map.setProjectionId(projectionId)\n    }, [map, projectionId])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || !maxLevel) return\n      map.setMaxLevel(maxLevel)\n    }, [map, maxLevel])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || !minLevel) return\n      map.setMinLevel(minLevel)\n    }, [map, minLevel])\n\n    useKakaoEvent(map, \"bounds_changed\", onBoundsChanged)\n    useKakaoEvent(map, \"center_changed\", onCenterChanged)\n    useKakaoEvent(map, \"click\", onClick)\n    useKakaoEvent(map, \"dblclick\", onDoubleClick)\n    useKakaoEvent(map, \"drag\", onDrag)\n    useKakaoEvent(map, \"dragstart\", onDragStart)\n    useKakaoEvent(map, \"dragend\", onDragEnd)\n    useKakaoEvent(map, \"idle\", onIdle)\n    useKakaoEvent(map, \"maptypeid_changed\", onMaptypeidChanged)\n    useKakaoEvent(map, \"mousemove\", onMouseMove)\n    useKakaoEvent(map, \"rightclick\", onRightClick)\n    useKakaoEvent(map, \"tilesloaded\", onTileLoaded)\n    useKakaoEvent(map, \"zoom_changed\", onZoomChanged)\n    useKakaoEvent(map, \"zoom_start\", onZoomStart)\n\n    return (\n      <>\n        <Container\n          id={id || \"react-kakao-maps-sdk-map-container\"}\n          {...props}\n          ref={container}\n        />\n        {map && (\n          <KakaoMapContext.Provider value={map}>\n            {children}\n          </KakaoMapContext.Provider>\n        )}\n      </>\n    )\n  }\n)\n\nexport default Map\n","import { useContext } from \"react\"\nimport { KakaoMapContext } from \"../components/Map\"\n\n/**\n * kakao map 객체를 가져오는 hook 입니다.\n * Map 객체 내부가 아니라면 Error를 발생 시킵니다.\n */\nconst useMap = (componentName?: string) => {\n  const kakaoMap = useContext(KakaoMapContext)\n  if (!kakaoMap) {\n    throw new Error(\n      `${\n        componentName ? componentName + \" Component\" : \"useMap\"\n      } must exist inside Map Component!`\n    )\n  }\n\n  return kakaoMap\n}\n\nexport default useMap\n","import React, {\n  useLayoutEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n} from \"react\"\nimport ReactDom from \"react-dom\"\n\ninterface InfoWindowProps {\n  map: kakao.maps.Map | kakao.maps.Roadview\n  position: kakao.maps.LatLng | kakao.maps.Viewpoint\n  marker?: kakao.maps.Marker\n  /**\n   * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부\n   * @default false\n   */\n  disableAutoPan?: boolean\n\n  /**\n   * 삭제 가능한 인포윈도우\n   */\n  removable?: boolean\n\n  /**\n   * 인포윈도우 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 로드뷰에 올라있는 인포윈도우의 높이 값(m 단위)\n   */\n  altitude?: number\n\n  /**\n   * 로드뷰 상에서 인포윈도우의 가시반경(m 단위), 두 지점 사이의 거리가 지정한 값보다 멀어지면 인포윈도우는 보이지 않게 된다\n   */\n  range?: number\n\n  /**\n   * 인포윈도우 객체 생성후 해당 객체를 반환하는 함수\n   */\n  onCreate?: (infoWindow: kakao.maps.InfoWindow) => void\n}\n\nconst InfoWindow = React.forwardRef<\n  kakao.maps.InfoWindow,\n  React.PropsWithChildren<InfoWindowProps>\n>(\n  (\n    {\n      map,\n      position,\n      marker,\n      children,\n      altitude,\n      disableAutoPan,\n      range,\n      removable,\n      zIndex,\n      onCreate,\n    },\n    ref\n  ) => {\n    const container = useRef(document.createElement(\"div\"))\n\n    const infoWindow = useMemo(() => {\n      const kakaoInfoWindow = new kakao.maps.InfoWindow({\n        altitude: altitude,\n        disableAutoPan: disableAutoPan,\n        range: range,\n        removable: removable,\n        zIndex: zIndex,\n        content: container.current,\n        position: position,\n      })\n      container.current.style.display = \"none\"\n      return kakaoInfoWindow\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [disableAutoPan, removable])\n\n    useImperativeHandle(ref, () => infoWindow, [infoWindow])\n\n    useLayoutEffect(() => {\n      infoWindow.open(map, marker)\n      return () => {\n        infoWindow.close()\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [map, marker])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(infoWindow)\n    }, [infoWindow, onCreate])\n\n    useLayoutEffect(() => {\n      if (!infoWindow) return\n      infoWindow.setPosition(position)\n    }, [infoWindow, position])\n\n    useLayoutEffect(() => {\n      if (!infoWindow || !altitude) return\n      infoWindow.setAltitude(altitude)\n    }, [infoWindow, altitude])\n\n    useLayoutEffect(() => {\n      if (!infoWindow || !range) return\n      infoWindow.setRange(range)\n    }, [infoWindow, range])\n\n    useLayoutEffect(() => {\n      if (!infoWindow || !zIndex) return\n      infoWindow.setZIndex(zIndex)\n    }, [infoWindow, zIndex])\n\n    return (\n      container.current.parentElement &&\n      ReactDom.createPortal(children, container.current.parentElement)\n    )\n  }\n)\n\nexport default InfoWindow\n","import React, { useLayoutEffect, useImperativeHandle, useMemo, useContext } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\nimport useIsomorphicLayoutEffect from \"../hooks/useIsomorphicLayoutEffect\"\n\nexport const KakaoMapMarkerClustererContext =\n  React.createContext<kakao.maps.MarkerClusterer>(\n    undefined as unknown as kakao.maps.MarkerClusterer\n  )\n\nexport interface MarkerClustererProps {\n  /**\n   * 클러스터의 격자 크기. 화면 픽셀 단위이며 해당 격자 영역 안에 마커가 포함되면 클러스터에 포함시킨다\n   * @default 60\n   */\n  gridSize?: number\n  /**\n   * 마커들의 좌표 평균을 클러스터 좌표 설정 여부\n   * @default false\n   */\n  averageCenter?: boolean\n  /**\n   * 클러스터링 할 지도의 최소 레벨 값. 지정한 숫자에 해당하는 레벨 미만에서는 클러스터링 하지 않는다\n   * @default 0\n   */\n  minLevel?: number\n  /**\n   * 클러스터링 할 최소 마커 수\n   * @default 2\n   */\n  minClusterSize?: number\n  /**\n   * 클러스터의 스타일. 여러개를 선언하면 calculator 로 구분된 사이즈 구간마다 서로 다른 스타일을 적용시킬 수 있다\n   */\n  styles?: React.CSSProperties[] | object[]\n  /**\n   * 클러스터에 표시할 문자열 또는 문자열 생성 함수.\n   * @default \"클러스터에 포함된 숫자\"\n   */\n  texts?: string[] | ((size: number) => string)\n  /**\n   * 클러스터 크기를 구분하는 값을 가진 배열 또는 구분값 생성함수\n   * @default [10, 100, 1000, 10000]\n   */\n  calculator?: number[] | ((size: number) => number[])\n  /**\n   * 클러스터 클릭 시 지도 확대 여부. true로 설정하면 클러스터 클릭 시 확대 되지 않는다\n   * @default false\n   */\n  disableClickZoom?: boolean\n  /**\n   * 클러스터 클릭 가능 여부 지정 옵션. false일 경우 클러스터의 clusterclick, clusterdblclick, clusterrightclick 이벤트가 발생하지 않으며, 커서가 변경되지 않는다.\n   * @default true\n   */\n  clickable?: boolean\n  /**\n   * 클러스터에 마우스 over/out 가능 여부 지정 옵션. false일 경우 클러스터의 clusterover, clusterout 이벤트가 발생하지 않는다.\n   * @default true\n   */\n  hoverable?: boolean\n\n  /**\n   * 클러스터 마커를 클릭 했을 때 발생한다.\n   * 이벤트 핸들러 함수 인자로는 Cluster 객체가 넘어온다.\n   * 클러스터 마커 클릭 시 지도가 줌인 되는 경우 원하는 Cluster 객체를 얻지 못할 수도 있다.\n   * 때문에 MarkerClusterer 를 생성할 때 disableClickZoom 옵션을 true로 설정하여\n   * 클러스터 마커를 클릭했을 때 지도가 줌인되지 않도록 설정 후 사용한다.\n   */\n  onClusterclick?: (\n    target: kakao.maps.MarkerClusterer,\n    cluster: kakao.maps.Cluster\n  ) => void\n  /**\n   * 클러스터 마커를 마우스 오버 했을 때 발생한다\n   * 이벤트 핸들러 함수 인자로는 마우스 오버한 Cluster 객체가 넘어온다.\n   */\n  onClusterover?: (\n    target: kakao.maps.MarkerClusterer,\n    cluster: kakao.maps.Cluster\n  ) => void\n  /**\n   * 클러스터 마커를 마우스 아웃 했을 때 발생한다\n   * 이벤트 핸들러 함수 인자로는 마우스 아웃된 Cluster 객체가 넘어온다.\n   */\n  onClusterout?: (\n    target: kakao.maps.MarkerClusterer,\n    cluster: kakao.maps.Cluster\n  ) => void\n  /**\n   * 클러스터 마커를 더블클릭 했을 때 발생한다\n   * 이벤트 핸들러 함수 인자로는 더블클릭한 Cluster 객체가 넘어온다.\n   * MarkerClusterer 를 생성할 때 disableClickZoom 옵션을 true로 설정해야만 이벤트가 발생한다.\n   */\n  onClusterdblclick?: (\n    target: kakao.maps.MarkerClusterer,\n    cluster: kakao.maps.Cluster\n  ) => void\n  /**\n   * 클러스터 마커를 오른쪽 클릭 했을 때 발생한다\n   * 이벤트 핸들러 함수 인자로는 오른쪽 클릭한 Cluster 객체가 넘어온다.\n   */\n  onClusterrightclick?: (\n    target: kakao.maps.MarkerClusterer,\n    cluster: kakao.maps.Cluster\n  ) => void\n  /**\n   * 클러스터링이 완료됐을 때 발생한다.\n   * 이벤트 핸들러 함수 인자로는 생성된 Cluster 객체 전체가 배열로 넘어온다.\n   */\n  onClustered?: (\n    target: kakao.maps.MarkerClusterer,\n    clusters: kakao.maps.Cluster[]\n  ) => void\n  /**\n   * MarkerClusterer 생성 후 해당 객체를 전달하는 함수\n   */\n  onCreate?: (target: kakao.maps.MarkerClusterer) => void\n}\n\nconst MarkerClusterer = React.forwardRef<\n  kakao.maps.MarkerClusterer,\n  React.PropsWithChildren<MarkerClustererProps>\n>(\n  (\n    {\n      children,\n      averageCenter,\n      calculator,\n      clickable,\n      disableClickZoom,\n      gridSize,\n      hoverable,\n      minClusterSize,\n      minLevel,\n      styles,\n      texts,\n      onClusterclick,\n      onClusterdblclick,\n      onClustered,\n      onClusterout,\n      onClusterover,\n      onClusterrightclick,\n      onCreate,\n    },\n    ref\n  ) => {\n    const map = useMap(`MarkerClusterer`)\n    const markerClusterer = useMemo(() => {\n      if (!window.kakao.maps.MarkerClusterer) {\n        console.warn(\n          \"clusterer 라이브러리를 별도 로드 해야 사용 가능합니다. `https://apis.map.kakao.com/web/guide/#loadlibrary`\"\n        )\n        return\n      }\n      return new kakao.maps.MarkerClusterer({\n        averageCenter,\n        calculator,\n        clickable,\n        disableClickZoom,\n        gridSize,\n        hoverable,\n        minClusterSize,\n        minLevel,\n        styles,\n        texts,\n      })\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useImperativeHandle(ref, () => markerClusterer!, [markerClusterer])\n\n    useLayoutEffect(() => {\n      markerClusterer?.setMap(map)\n    }, [map, markerClusterer])\n\n    useLayoutEffect(() => {\n      if (markerClusterer && onCreate) onCreate(markerClusterer)\n    }, [markerClusterer, onCreate])\n\n    useLayoutEffect(() => {\n      if (markerClusterer && gridSize) {\n        markerClusterer.setGridSize(gridSize)\n        markerClusterer.redraw()\n      }\n    }, [markerClusterer, gridSize])\n\n    useLayoutEffect(() => {\n      if (markerClusterer && minClusterSize) {\n        markerClusterer.setMinClusterSize(minClusterSize)\n        markerClusterer.redraw()\n      }\n    }, [markerClusterer, minClusterSize])\n\n    useLayoutEffect(() => {\n      if (markerClusterer && typeof averageCenter !== \"undefined\") {\n        markerClusterer.setAverageCenter(averageCenter)\n        markerClusterer.redraw()\n      }\n    }, [markerClusterer, averageCenter])\n\n    useLayoutEffect(() => {\n      if (markerClusterer && minLevel) {\n        markerClusterer.setMinLevel(minLevel)\n        markerClusterer.redraw()\n      }\n    }, [markerClusterer, minLevel])\n\n    useLayoutEffect(() => {\n      if (markerClusterer && texts) {\n        markerClusterer.setTexts(texts)\n        markerClusterer.redraw()\n      }\n    }, [markerClusterer, texts])\n\n    useLayoutEffect(() => {\n      if (markerClusterer && calculator) {\n        markerClusterer.setCalculator(calculator)\n        markerClusterer.redraw()\n      }\n    }, [markerClusterer, calculator])\n\n    useKakaoEvent(markerClusterer, \"clustered\", onClustered)\n    useKakaoEvent(markerClusterer, \"clusterclick\", onClusterclick)\n    useKakaoEvent(markerClusterer, \"clusterover\", onClusterover)\n    useKakaoEvent(markerClusterer, \"clusterout\", onClusterout)\n    useKakaoEvent(markerClusterer, \"clusterdblclick\", onClusterdblclick)\n    useKakaoEvent(markerClusterer, \"clusterrightclick\", onClusterrightclick)\n\n    useLayoutEffect(() => {\n      if (markerClusterer && styles) {\n        markerClusterer.setStyles(styles)\n        markerClusterer.redraw()\n      }\n    }, [markerClusterer, styles])\n\n\n\n    if (!markerClusterer) {\n      return null\n    }\n\n    return (\n      <KakaoMapMarkerClustererContext.Provider value={markerClusterer}>\n        {children}\n        <MarkerClustererRedraw children={children} />\n      </KakaoMapMarkerClustererContext.Provider>\n    )\n  }\n)\n\nconst MarkerClustererRedraw: React.FC<{ children: React.ReactNode }> = ({ children: _ }) => {\n  const markerClusterer = useContext(KakaoMapMarkerClustererContext)\n  useIsomorphicLayoutEffect(() => {\n    markerClusterer.redraw()\n  })\n  return null\n}\n\nexport default MarkerClusterer\n","import React, {\n  useContext,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n} from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport InfoWindow from \"./InfoWindow\"\nimport { KakaoMapMarkerClustererContext } from \"./MarkerClusterer\"\n\ninterface MarkerProps {\n  map: kakao.maps.Map | kakao.maps.Roadview\n  position: kakao.maps.LatLng | kakao.maps.Viewpoint\n\n  /**\n   * marker 생성 후 marker 객체를 전달하는 callback\n   */\n  onCreate?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * click 이벤트 핸들러\n   */\n  onClick?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseover 이벤트 핸들러\n   */\n  onMouseOver?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseout 이벤트 핸들러\n   */\n  onMouseOut?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragstart 이벤트 핸들러\n   */\n  onDragStart?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragend 이벤트 핸들러\n   */\n  onDragEnd?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * 마커의 이미지\n   */\n  image?: kakao.maps.MarkerImage\n\n  /**\n   * 마커 엘리먼트의 타이틀 속성 값 (툴팁)\n   */\n  title?: string\n\n  /**\n   * 드래그 가능한 마커, 로드뷰에 올릴 경우에는 유효하지 않다.\n   */\n  draggable?: boolean\n\n  /**\n   * 클릭 가능한 마커\n   */\n  clickable?: boolean\n\n  /**\n   * 마커 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마커 투명도 (0-1)\n   */\n  opacity?: number\n\n  /**\n   * 로드뷰에 올라있는 마커의 높이 값(m 단위)\n   */\n  altitude?: number\n\n  /**\n   * 로드뷰 상에서 마커의 가시반경(m 단위), 두 지점 사이의 거리가 지정한 값보다 멀어지면 마커는 로드뷰에서 보이지 않게 된다.\n   */\n  range?: number\n\n  /**\n   * InfoWindow 옵션\n   */\n  infoWindowOptions?: {\n    /**\n     * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부 (기본값: false)\n     */\n    disableAutoPan?: boolean\n\n    /**\n     * 삭제 가능한 인포윈도우\n     */\n    removable?: boolean\n\n    /**\n     * 인포윈도우 엘리먼트의 z-index 속성 값\n     */\n    zIndex?: number\n\n    /**\n     * 로드뷰에 올라있는 인포윈도우의 높이 값(m 단위)\n     */\n    altitude?: number\n\n    /**\n     * 로드뷰 상에서 인포윈도우의 가시반경(m 단위), 두 지점 사이의 거리가 지정한 값보다 멀어지면 인포윈도우는 보이지 않게 된다\n     */\n    range?: number\n  }\n}\n\nconst Marker = React.forwardRef<\n  kakao.maps.Marker,\n  React.PropsWithChildren<MarkerProps>\n>(\n  (\n    {\n      map,\n      position,\n      children,\n      altitude,\n      clickable,\n      draggable,\n      image,\n      infoWindowOptions,\n      onCreate,\n      onClick,\n      onDragEnd,\n      onDragStart,\n      onMouseOut,\n      onMouseOver,\n      opacity,\n      range,\n      title,\n      zIndex,\n    },\n    ref\n  ) => {\n    const markerCluster = useContext(KakaoMapMarkerClustererContext)\n\n    // Marker 객체는 단 한번만 생성 되도록 함\n    const marker = useMemo(() => {\n      const kakaoMarker = new kakao.maps.Marker({\n        altitude,\n        clickable,\n        draggable,\n        image,\n        opacity,\n        range,\n        title,\n        zIndex,\n        position,\n      })\n\n      return kakaoMarker\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useImperativeHandle(ref, () => marker, [marker])\n\n    useLayoutEffect(() => {\n      if (markerCluster) {\n        markerCluster.addMarker(marker, true)\n      } else {\n        marker.setMap(map)\n      }\n\n      return () => {\n        if (markerCluster) {\n          markerCluster.removeMarker(marker, true)\n        } else {\n          marker.setMap(null)\n        }\n      }\n    }, [map, markerCluster, marker])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(marker)\n    }, [marker, onCreate])\n\n    useKakaoEvent(marker, \"click\", onClick)\n    useKakaoEvent(marker, \"dragstart\", onDragStart)\n    useKakaoEvent(marker, \"dragend\", onDragEnd)\n    useKakaoEvent(marker, \"mouseout\", onMouseOut)\n    useKakaoEvent(marker, \"mouseover\", onMouseOver)\n\n    // position이 변경되면 객체를 갱신한다.\n    useLayoutEffect(() => {\n      if (!map || !marker || !position) return\n\n      marker.setPosition(position)\n    }, [map, marker, position])\n\n    // image 객체가 존재하면 이미지를 로드한다\n    useLayoutEffect(() => {\n      if (!map || !marker || !image) return\n\n      marker.setImage(image)\n    }, [map, marker, image])\n\n    // altitude 값이 있으면 높이를 조정한다\n    useLayoutEffect(() => {\n      if (!map || !marker || !altitude) return\n\n      marker.setAltitude(altitude)\n    }, [map, marker, altitude])\n\n    // clickable 값이 있으면 클릭이 가능하도록 한다.\n    useLayoutEffect(() => {\n      if (!map || !marker || typeof clickable === \"undefined\") return\n\n      marker.setClickable(clickable)\n    }, [map, marker, clickable])\n\n    // draggable 값이 있으면 드래그가 가능하도록 한다.\n    useLayoutEffect(() => {\n      if (!map || !marker || typeof draggable === \"undefined\") return\n\n      marker.setDraggable(draggable)\n    }, [map, marker, draggable])\n\n    // opacity 값이 있으면 투명도를 조절한다.\n    useLayoutEffect(() => {\n      if (!map || !marker || !opacity) return\n\n      marker.setOpacity(opacity)\n    }, [map, marker, opacity])\n\n    // range 값이 있으면 마커의 가시반경을 조절한다.\n    useLayoutEffect(() => {\n      if (!map || !marker || !range) return\n\n      marker.setRange(range)\n    }, [map, marker, range])\n\n    // title 값이 있으면 마커의 제목을 조절한다.\n    useLayoutEffect(() => {\n      if (!map || !marker || !title) return\n\n      marker.setTitle(title)\n    }, [map, marker, title])\n\n    // zIndex 값이 있으면 마커의 zindex를 조절한다.\n    useLayoutEffect(() => {\n      if (!map || !marker || !zIndex) return\n\n      marker.setZIndex(zIndex)\n    }, [map, marker, zIndex])\n\n    if (children)\n      return (\n        <InfoWindow\n          position={position}\n          map={map}\n          marker={marker}\n          altitude={infoWindowOptions?.altitude}\n          disableAutoPan={infoWindowOptions?.disableAutoPan}\n          range={infoWindowOptions?.range}\n          removable={infoWindowOptions?.removable}\n          zIndex={infoWindowOptions?.zIndex}\n        >\n          {children}\n        </InfoWindow>\n      )\n\n    return null\n  }\n)\n\nexport default Marker\n","import React, { useMemo } from \"react\"\nimport useMap from \"../hooks/useMap\"\nimport Marker from \"./Marker\"\n\nexport interface MapMarkerProps {\n  /**\n   * 표시 위치\n   */\n  position:\n    | {\n        lat: number\n        lng: number\n      }\n    | {\n        x: number\n        y: number\n      }\n\n  image?: {\n    /**\n     * 표시 이미지 src\n     */\n    src: string\n\n    /**\n     * 표시 이미지 크기\n     */\n    size: {\n      width: number\n      height: number\n    }\n\n    options?: {\n      /**\n       * 마커 이미지의 alt 속성값을 정의한다.\n       */\n      alt?: string\n\n      /**\n       * 마커의 클릭 또는 마우스오버 가능한 영역을 표현하는 좌표값\n       */\n      coords?: string\n\n      /**\n       * 마커의 좌표에 일치시킬 이미지 안의 좌표 (기본값: 이미지의 가운데 아래)\n       */\n      offset?: { x: number; y: number }\n\n      /**\n       * 마커의 클릭 또는 마우스오버 가능한 영역의 모양\n       */\n      shape?: \"default\" | \"rect\" | \"circle\" | \"poly\"\n\n      /**\n       * 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\n       */\n      spriteOrigin?: { x: number; y: number }\n\n      /**\n       * 스프라이트 이미지의 전체 크기\n       */\n      spriteSize?: { width: number; height: number }\n    }\n  }\n\n  /**\n   * click 이벤트 핸들러\n   */\n  onClick?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseover 이벤트 핸들러\n   */\n  onMouseOver?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseout 이벤트 핸들러\n   */\n  onMouseOut?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragstart 이벤트 핸들러\n   */\n  onDragStart?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragend 이벤트 핸들러\n   */\n  onDragEnd?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * Maker 생성 이벤트 핸들러\n   */\n  onCreate?: (maker: kakao.maps.Marker) => void\n\n  /**\n   * 마커 엘리먼트의 타이틀 속성 값 (툴팁)\n   */\n  title?: string\n\n  /**\n   * 드래그 가능한 마커, 로드뷰에 올릴 경우에는 유효하지 않다.\n   */\n  draggable?: boolean\n\n  /**\n   * 클릭 가능한 마커\n   */\n  clickable?: boolean\n\n  /**\n   * 마커 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마커 투명도 (0-1)\n   */\n  opacity?: number\n\n  /**\n   * InfoWindow 옵션\n   */\n  infoWindowOptions?: {\n    /**\n     * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부 (기본값: false)\n     */\n    disableAutoPan?: boolean\n\n    /**\n     * 삭제 가능한 인포윈도우\n     */\n    removable?: boolean\n\n    /**\n     * 인포윈도우 엘리먼트의 z-index 속성 값\n     */\n    zIndex?: number\n  }\n}\n\n/**\n * Map에서 Marker를 생성할 때 사용 합니다.\n * `onCreate` 이벤트를 통해 생성 후 `maker` 객체에 직접 접근하여 초기 설정이 가능합니다.\n */\nconst MapMarker = React.forwardRef<\n  kakao.maps.Marker,\n  React.PropsWithChildren<MapMarkerProps>\n>(\n  (\n    {\n      image,\n      position,\n      children,\n      clickable,\n      draggable,\n      infoWindowOptions,\n      onClick,\n      onDragEnd,\n      onDragStart,\n      onMouseOut,\n      onMouseOver,\n      onCreate,\n      opacity,\n      title,\n      zIndex,\n    },\n    ref\n  ) => {\n    const map = useMap(`MapMarker`)\n\n    const markerImage = useMemo(() => {\n      return (\n        image &&\n        new kakao.maps.MarkerImage(\n          image.src,\n          new kakao.maps.Size(image.size.width, image.size.height),\n          {\n            alt: image.options?.alt,\n            coords: image.options?.coords,\n            offset:\n              image.options?.offset &&\n              new kakao.maps.Point(\n                image.options?.offset.x,\n                image.options?.offset.y\n              ),\n            shape: image.options?.shape,\n            spriteOrigin:\n              image.options?.spriteOrigin &&\n              new kakao.maps.Point(\n                image.options?.spriteOrigin.x,\n                image.options?.spriteOrigin.y\n              ),\n            spriteSize:\n              image.options?.spriteSize &&\n              new kakao.maps.Size(\n                image.options?.spriteSize.width,\n                image.options?.spriteSize.height\n              ),\n          }\n        )\n      )\n    }, [image])\n\n    const markerPosition = useMemo(() => {\n      if (\"lat\" in position) {\n        return new kakao.maps.LatLng(position.lat, position.lng)\n      }\n      return new kakao.maps.Coords(position.x, position.y).toLatLng()\n\n      // @ts-ignore\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [position.lat, position.lng, position.x, position.y])\n\n    return (\n      <Marker\n        map={map}\n        position={markerPosition}\n        image={markerImage}\n        clickable={clickable}\n        draggable={draggable}\n        infoWindowOptions={infoWindowOptions}\n        onClick={onClick}\n        onDragEnd={onDragEnd}\n        onDragStart={onDragStart}\n        onMouseOut={onMouseOut}\n        onMouseOver={onMouseOver}\n        onCreate={onCreate}\n        opacity={opacity}\n        title={title}\n        zIndex={zIndex}\n        ref={ref}\n      >\n        {children}\n      </Marker>\n    )\n  }\n)\n\nexport default MapMarker\n","import React, { useMemo } from \"react\"\nimport InfoWindow from \"./InfoWindow\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface MapInfoWindowProps {\n  /**\n   * Contianer id에 대해서 지정합니다.\n   */\n  id?: string\n\n  /**\n   * Contianer className에 대해서 지정합니다.\n   */\n  className?: string\n\n  /**\n   * Contianer style에 대해서 지정합니다.\n   */\n  style?: React.CSSProperties\n\n  /**\n   * 인포윈도가 표시될 위치\n   */\n  position: {\n    lat: number\n    lng: number\n  }\n  /**\n   * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부 (기본값: false)\n   */\n  disableAutoPan?: boolean\n\n  /**\n   * 삭제 가능한 인포윈도우\n   */\n  removable?: boolean\n\n  /**\n   * 인포윈도우 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 인포윈도우 객체 생성후 해당 객체를 반환하는 함수\n   */\n  onCreate?: (infoWindow: kakao.maps.InfoWindow) => void\n}\n\n/**\n * Map 컴포넌트에서 InfoWindow를 그릴 때 사용됩니다.\n * `onCreate` 이벤트를 통해 생성 후 `infoWindow` 객체에 직접 접근하여 초기 설정이 가능합니다.\n */\nconst MapInfoWindow = React.forwardRef<\n  kakao.maps.InfoWindow,\n  React.PropsWithChildren<MapInfoWindowProps>\n>(\n  (\n    { position, children, disableAutoPan, removable, zIndex, onCreate },\n    ref\n  ) => {\n    const map = useMap(`MapInfoWindow`)\n    const infoPosition = useMemo(() => {\n      return new kakao.maps.LatLng(position.lat, position.lng)\n    }, [position.lat, position.lng])\n\n    return (\n      <InfoWindow\n        disableAutoPan={disableAutoPan}\n        removable={removable}\n        zIndex={zIndex}\n        map={map}\n        position={infoPosition}\n        onCreate={onCreate}\n        ref={ref}\n      >\n        {children}\n      </InfoWindow>\n    )\n  }\n)\n\nexport default MapInfoWindow\n","import React, {\n  useContext,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from \"react\"\nimport ReactDOM from \"react-dom\"\nimport useMap from \"../hooks/useMap\"\nimport { KakaoMapMarkerClustererContext } from \"./MarkerClusterer\"\n\nexport interface CustomOverlayMapProps {\n  /**\n   * 커스텀 오버레이의 좌표\n   */\n  position: {\n    lat: number\n    lng: number\n  }\n  /**\n   * true 로 설정하면 컨텐츠 영역을 클릭했을 경우 지도 이벤트를 막아준다.\n   */\n  clickable?: boolean\n\n  /**\n   * 컨텐츠의 x축 위치. 0_1 사이의 값을 가진다. 기본값은 0.5\n   */\n  xAnchor?: number\n\n  /**\n   * 컨텐츠의 y축 위치. 0_1 사이의 값을 가진다. 기본값은 0.5\n   */\n  yAnchor?: number\n\n  /**\n   * 커스텀 오버레이의 z-index\n   */\n  zIndex?: number\n\n  /**\n   * 커스텀 오버레이를 생성 후 해당 객체를 가지고 callback 함수를 실행 시켜줌\n   */\n  onCreate?: (customOverlay: kakao.maps.CustomOverlay) => void\n}\n\n/**\n * Map에 CustomOverlay를 올릴 때 사용하는 컴포넌트 입니다.\n * `onCreate` 이벤트 또는 `ref` 객체를 통해서 `CustomOverlay` 객체에 직접 접근 및 초기 설정 작업을 지정할 수 있습니다.\n */\nconst CustomOverlayMap = React.forwardRef<\n  kakao.maps.CustomOverlay,\n  React.PropsWithChildren<CustomOverlayMapProps>\n>(\n  (\n    { position, children, clickable, xAnchor, yAnchor, zIndex, onCreate },\n    ref\n  ) => {\n    const markerCluster = useContext(KakaoMapMarkerClustererContext)\n\n    const map = useMap(`CustomOverlayMap`)\n    const container = useRef(document.createElement(\"div\"))\n\n    const overlayPosition = useMemo(() => {\n      return new kakao.maps.LatLng(position.lat, position.lng)\n    }, [position.lat, position.lng])\n\n    const overlay = useMemo(() => {\n      const KakaoCustomOverlay = new kakao.maps.CustomOverlay({\n        clickable: clickable,\n        xAnchor: xAnchor,\n        yAnchor: yAnchor,\n        zIndex: zIndex,\n        position: overlayPosition,\n        content: container.current,\n      })\n      container.current.style.display = \"none\"\n\n      return KakaoCustomOverlay\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [clickable, xAnchor, yAnchor])\n\n    useImperativeHandle(ref, () => overlay, [overlay])\n\n    useLayoutEffect(() => {\n      if (!map) return\n\n      if (markerCluster) {\n        markerCluster.addMarker(overlay, true)\n      } else {\n        overlay.setMap(map)\n      }\n\n      return () => {\n        if (markerCluster) {\n          markerCluster.removeMarker(overlay, true)\n        } else {\n          overlay.setMap(null)\n        }\n      }\n    }, [map, markerCluster, overlay])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(overlay)\n    }, [overlay, onCreate])\n\n    useLayoutEffect(() => {\n      overlay.setPosition(overlayPosition)\n    }, [overlay, overlayPosition])\n\n    useLayoutEffect(() => {\n      if (!zIndex) return\n      overlay.setZIndex(zIndex)\n    }, [overlay, zIndex])\n\n    return (\n      container.current.parentElement &&\n      ReactDOM.createPortal(children, container.current.parentElement)\n    )\n  }\n)\n\nexport default CustomOverlayMap\n","import React, { useImperativeHandle, useLayoutEffect, useMemo } from \"react\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface MapTypeControlProps {\n  /**\n   * MapTypeControl의 Position를 정의 한다.\n   */\n  position?: kakao.maps.ControlPosition\n}\n\n/**\n * 일반 지도/하이브리드 간 지도 타입 전환 컨트롤을 생성한다.\n * 현재는 일반 지도/하이브리드 간 전환 컨트롤만 지원되며 다른 지도 타입을 제어하는 컨트롤이 필요할 경우에는 직접 구현해야 한다.\n */\nconst MapTypeControl = React.forwardRef<\n  kakao.maps.MapTypeControl,\n  MapTypeControlProps\n>(({ position = kakao.maps.ControlPosition.TOPRIGHT }, ref) => {\n  const map = useMap(`MapTypeControl`)\n\n  const mapTypeControl = useMemo(() => {\n    return new kakao.maps.MapTypeControl()\n  }, [])\n\n  useImperativeHandle(ref, () => mapTypeControl, [mapTypeControl])\n\n  useLayoutEffect(() => {\n    map.addControl(mapTypeControl, position)\n\n    return () => {\n      map.removeControl(mapTypeControl)\n    }\n  }, [map, mapTypeControl, position])\n\n  return null\n})\n\nexport default MapTypeControl\n","import React, { useEffect, useImperativeHandle, useMemo } from \"react\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface ZoomControlProps {\n  /**\n   * ZoomControl의 Position를 정의 한다.\n   */\n  position?: kakao.maps.ControlPosition\n}\n\n/**\n * 확대·축소 컨트롤을 생성한다.\n */\nconst ZoomControl = React.forwardRef<kakao.maps.ZoomControl, ZoomControlProps>(\n  ({ position = kakao.maps.ControlPosition.RIGHT }, ref) => {\n    const map = useMap(`ZoomControl`)\n\n    const ZoomControl = useMemo(() => {\n      return new kakao.maps.ZoomControl()\n    }, [])\n\n    useImperativeHandle(ref, () => ZoomControl, [ZoomControl])\n\n    useEffect(() => {\n      map.addControl(ZoomControl, position)\n\n      return () => {\n        map.removeControl(ZoomControl)\n      }\n\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [map, position])\n\n    return null\n  }\n)\n\nexport default ZoomControl\n","import React, { useEffect } from \"react\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface MapTypeIdProps {\n  /**\n   * MapTypeId를 정의 한다.\n   */\n  type: kakao.maps.MapTypeId\n}\n\n/**\n * 추가적으로 보이고 싶은 지도 타입을 추가 할 때 사용한다.\n */\nconst MapTypeId: React.FC<MapTypeIdProps> = ({ type }) => {\n  const map = useMap(`MapTypeId`)\n\n  useEffect(() => {\n    map.addOverlayMapTypeId(type)\n\n    return () => {\n      map.removeOverlayMapTypeId(type)\n    }\n  }, [map, type])\n\n  return null\n}\n\nexport default MapTypeId\n","import React, { useImperativeHandle, useLayoutEffect, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface CircleProps {\n  /**\n   * 중심 좌표를 지정합니다.\n   */\n  center: {\n    lat: number\n    lng: number\n  }\n  /**\n   * 원의 반지름 크기를 지정합니다 (미터 단위).\n   */\n  radius: number\n\n  /**\n   * #xxxxxx 형태의 채움 색 (기본값: ‘#F10000’)\n   */\n  fillColor?: string\n  /**\n   * 채움 불투명도 (0-1) (기본값: 0)\n   */\n  fillOpacity?: number\n  /**\n   * 픽셀 단위의 선 두께 (기본값: 3)\n   */\n  strokeWeight?: number\n  /**\n   * #xxxxxx 형태의 선 색 (기본값: ‘#F10000’)\n   */\n  strokeColor?: string\n  /**\n   * 선 불투명도 (0-1) (기본값: 0.6)\n   */\n  strokeOpacity?: number\n  /**\n   * 선 스타일 (기본값: ‘solid’)\n   */\n  strokeStyle?: kakao.maps.StrokeStyles\n  /**\n   * 원의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 원에 마우스 커서를 올리면 발생한다.\n   */\n  onMouseover?: (\n    target: kakao.maps.Circle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 커서가 원에서 벗어나면 발생한다.\n   */\n  onMouseout?: (\n    target: kakao.maps.Circle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 원에서 마우스를 움직이면 발생한다.\n   */\n  onMousemove?: (\n    target: kakao.maps.Circle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 원에서 마우스 버튼을 누르면 발생한다.\n   */\n  onMousedown?: (\n    target: kakao.maps.Circle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 원을 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Circle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 객체 생성시 호출 됩니다.\n   */\n  onCreate?: (target: kakao.maps.Circle) => void\n}\n\n/**\n * Map 상에 원을 그립니다.\n */\nconst Circle = React.forwardRef<kakao.maps.Circle, CircleProps>(\n  (\n    {\n      center,\n      radius,\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n      zIndex,\n      onMouseover,\n      onMouseout,\n      onMousemove,\n      onMousedown,\n      onClick,\n      onCreate,\n    },\n    ref\n  ) => {\n    const map = useMap(`Circle`)\n\n    const circleCenter = useMemo(() => {\n      return new kakao.maps.LatLng(center.lat, center.lng)\n    }, [center.lat, center.lng])\n\n    const circle = useMemo(() => {\n      return new kakao.maps.Circle({\n        center: circleCenter,\n        radius,\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n        zIndex,\n      })\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useImperativeHandle(ref, () => circle, [circle])\n\n    useLayoutEffect(() => {\n      circle.setMap(map)\n      return () => {\n        circle.setMap(null)\n      }\n    }, [map, circle])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(circle)\n    }, [circle, onCreate])\n\n    useLayoutEffect(() => {\n      if (circle) circle.setPosition(circleCenter)\n    }, [circle, circleCenter])\n\n    useLayoutEffect(() => {\n      circle.setRadius(radius)\n    }, [circle, radius])\n\n    useLayoutEffect(() => {\n      if (!zIndex) return\n      circle.setZIndex(zIndex)\n    }, [circle, zIndex])\n\n    useLayoutEffect(() => {\n      circle.setOptions({\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n      })\n    }, [\n      circle,\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n    ])\n\n    useKakaoEvent(circle, \"mouseover\", onMouseover)\n    useKakaoEvent(circle, \"mouseout\", onMouseout)\n    useKakaoEvent(circle, \"mousemove\", onMousemove)\n    useKakaoEvent(circle, \"mousedown\", onMousedown)\n    useKakaoEvent(circle, \"click\", onClick)\n\n    return null\n  }\n)\n\nexport default Circle\n","import React, { useImperativeHandle, useLayoutEffect, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\ninterface LatLng {\n  lat: number\n  lng: number\n}\n\nexport interface PolylineProps {\n  path: LatLng[] | LatLng[][]\n  /**\n   * 화살표 여부\n   */\n  endArrow?: boolean\n  /**\n   * 픽셀 단위의 선 두께 (기본값: 3)\n   */\n  strokeWeight?: number\n  /**\n   * #xxxxxx 형태의 선 색 (기본값: ‘#F10000’)\n   */\n  strokeColor?: string\n  /**\n   * 선 불투명도 (0-1) (기본값: 0.6)\n   */\n  strokeOpacity?: number\n  /**\n   * 선 스타일 (기본값: ‘solid’)\n   */\n  strokeStyle?: kakao.maps.StrokeStyles\n  /**\n   * 선의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마우스 커서를 올리면 발생한다.\n   */\n  onMouseover?: (\n    target: kakao.maps.Polyline,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 커서가 벗어나면 발생한다.\n   */\n  onMouseout?: (\n    target: kakao.maps.Polyline,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스를 움직이면 발생한다.\n   */\n  onMousemove?: (\n    target: kakao.maps.Polyline,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 버튼을 누르면 발생한다.\n   */\n  onMousedown?: (\n    target: kakao.maps.Polyline,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Polyline,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 객체 생성시 호출 됩니다.\n   */\n  onCreate?: (target: kakao.maps.Polyline) => void\n}\n\n/**\n * Map 상에 폴리라인을 그립니다.\n */\nconst Polyline = React.forwardRef<kakao.maps.Polyline, PolylineProps>(\n  (\n    {\n      path,\n      endArrow,\n      onClick,\n      onMousedown,\n      onMousemove,\n      onMouseout,\n      onMouseover,\n      onCreate,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n      zIndex,\n    },\n    ref\n  ) => {\n    const map = useMap(`Polyline`)\n\n    const polyLinePath = useMemo(() => {\n      if ((path as LatLng[]).every((v) => v instanceof Array)) {\n        return (path as LatLng[][]).map((v) => {\n          return v.map((p) => new kakao.maps.LatLng(p.lat, p.lng))\n        })\n      }\n      return (path as LatLng[]).map((v) => {\n        return new kakao.maps.LatLng(v.lat, v.lng)\n      })\n    }, [path])\n\n    const polyline = useMemo(() => {\n      return new kakao.maps.Polyline({\n        path: polyLinePath,\n        endArrow,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n        zIndex,\n      })\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useImperativeHandle(ref, () => polyline, [polyline])\n\n    useLayoutEffect(() => {\n      polyline.setMap(map)\n      return () => polyline.setMap(null)\n    }, [map, polyline])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(polyline)\n    }, [polyline, onCreate])\n\n    useLayoutEffect(() => {\n      polyline.setOptions({\n        endArrow,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n      })\n    }, [\n      polyline,\n      endArrow,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n    ])\n\n    useLayoutEffect(() => {\n      polyline.setPath(polyLinePath)\n    }, [polyline, polyLinePath])\n\n    useLayoutEffect(() => {\n      if (zIndex) polyline.setZIndex(zIndex)\n    }, [polyline, zIndex])\n\n    useKakaoEvent(polyline, \"mouseover\", onMouseover)\n    useKakaoEvent(polyline, \"mouseout\", onMouseout)\n    useKakaoEvent(polyline, \"mousemove\", onMousemove)\n    useKakaoEvent(polyline, \"mousedown\", onMousedown)\n    useKakaoEvent(polyline, \"click\", onClick)\n\n    return null\n  }\n)\n\nexport default Polyline\n","import React, { useLayoutEffect, useImperativeHandle, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\ninterface LatLng {\n  lat: number\n  lng: number\n}\n\nexport interface PolygonProps {\n  path: LatLng[] | LatLng[][]\n  /**\n   * #xxxxxx 형태의 채움 색 (기본값: ‘#F10000’)\n   */\n  fillColor?: string\n  /**\n   * 채움 불투명도 (0-1) (기본값: 0)\n   */\n  fillOpacity?: number\n  /**\n   * 픽셀 단위의 선 두께 (기본값: 3)\n   */\n  strokeWeight?: number\n  /**\n   * #xxxxxx 형태의 선 색 (기본값: ‘#F10000’)\n   */\n  strokeColor?: string\n  /**\n   * 선 불투명도 (0-1) (기본값: 0.6)\n   */\n  strokeOpacity?: number\n  /**\n   * 선 스타일 (기본값: ‘solid’)\n   */\n  strokeStyle?: kakao.maps.StrokeStyles\n  /**\n   * 선의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마우스 커서를 올리면 발생한다.\n   */\n  onMouseover?: (\n    target: kakao.maps.Polygon,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 커서가 벗어나면 발생한다.\n   */\n  onMouseout?: (\n    target: kakao.maps.Polygon,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스를 움직이면 발생한다.\n   */\n  onMousemove?: (\n    target: kakao.maps.Polygon,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 버튼을 누르면 발생한다.\n   */\n  onMousedown?: (\n    target: kakao.maps.Polygon,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Polygon,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 객체 생성시 호출 됩니다.\n   */\n  onCreate?: (target: kakao.maps.Polygon) => void\n}\n\n/**\n * Map 상에 다각형을 그립니다.\n */\nconst Polygon = React.forwardRef<kakao.maps.Polygon, PolygonProps>(\n  (\n    {\n      path,\n      onClick,\n      onMousedown,\n      onMousemove,\n      onMouseout,\n      onMouseover,\n      onCreate,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n      fillColor,\n      fillOpacity,\n      zIndex,\n    },\n    ref\n  ) => {\n    const map = useMap(`Polygon`)\n\n    const polygonPath = useMemo(() => {\n      if ((path as LatLng[]).every((v) => v instanceof Array)) {\n        return (path as LatLng[][]).map((v) => {\n          return v.map((p) => new kakao.maps.LatLng(p.lat, p.lng))\n        })\n      }\n      return (path as LatLng[]).map((v) => {\n        return new kakao.maps.LatLng(v.lat, v.lng)\n      })\n    }, [path])\n\n    const polygon = useMemo(() => {\n      return new kakao.maps.Polygon({\n        path: polygonPath,\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n        zIndex,\n      })\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useImperativeHandle(ref, () => polygon, [polygon])\n\n    useLayoutEffect(() => {\n      polygon.setMap(map)\n      return () => polygon.setMap(null)\n    }, [map, polygon])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(polygon)\n    }, [polygon, onCreate])\n\n    useLayoutEffect(() => {\n      polygon.setOptions({\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n      })\n    }, [\n      polygon,\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n    ])\n\n    useLayoutEffect(() => {\n      polygon.setPath(polygonPath)\n    }, [polygon, polygonPath])\n\n    useLayoutEffect(() => {\n      if (zIndex) polygon.setZIndex(zIndex)\n    }, [polygon, zIndex])\n\n    useKakaoEvent(polygon, \"mouseover\", onMouseover)\n    useKakaoEvent(polygon, \"mouseout\", onMouseout)\n    useKakaoEvent(polygon, \"mousemove\", onMousemove)\n    useKakaoEvent(polygon, \"mousedown\", onMousedown)\n    useKakaoEvent(polygon, \"click\", onClick)\n\n    return null\n  }\n)\n\nexport default Polygon\n","import React, { useImperativeHandle, useLayoutEffect, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\ninterface LatLng {\n  lat: number\n  lng: number\n}\n\nexport interface RectangleProps {\n  bounds: {\n    sw: LatLng\n    ne: LatLng\n  }\n  /**\n   * #xxxxxx 형태의 채움 색 (기본값: ‘#F10000’)\n   */\n  fillColor?: string\n  /**\n   * 채움 불투명도 (0-1) (기본값: 0)\n   */\n  fillOpacity?: number\n  /**\n   * 픽셀 단위의 선 두께 (기본값: 3)\n   */\n  strokeWeight?: number\n  /**\n   * #xxxxxx 형태의 선 색 (기본값: ‘#F10000’)\n   */\n  strokeColor?: string\n  /**\n   * 선 불투명도 (0-1) (기본값: 0.6)\n   */\n  strokeOpacity?: number\n  /**\n   * 선 스타일 (기본값: ‘solid’)\n   */\n  strokeStyle?: kakao.maps.StrokeStyles\n  /**\n   * 선의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마우스 커서를 올리면 발생한다.\n   */\n  onMouseover?: (\n    target: kakao.maps.Rectangle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 커서가 벗어나면 발생한다.\n   */\n  onMouseout?: (\n    target: kakao.maps.Rectangle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스를 움직이면 발생한다.\n   */\n  onMousemove?: (\n    target: kakao.maps.Rectangle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 버튼을 누르면 발생한다.\n   */\n  onMousedown?: (\n    target: kakao.maps.Rectangle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Rectangle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 객체 생성시 호출 됩니다.\n   */\n  onCreate?: (target: kakao.maps.Rectangle) => void\n}\n\n/**\n * Map 상에 사각형을 그립니다.\n */\nconst Rectangle = React.forwardRef<kakao.maps.Rectangle, RectangleProps>(\n  (\n    {\n      bounds,\n      onClick,\n      onMousedown,\n      onMousemove,\n      onMouseout,\n      onMouseover,\n      onCreate,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n      fillColor,\n      fillOpacity,\n      zIndex,\n    },\n    ref\n  ) => {\n    const map = useMap(`Rectangle`)\n\n    const rectangleBounds = useMemo(() => {\n      return new kakao.maps.LatLngBounds(\n        new kakao.maps.LatLng(bounds.sw.lat, bounds.sw.lng),\n        new kakao.maps.LatLng(bounds.ne.lat, bounds.ne.lng)\n      )\n    }, [bounds])\n\n    const rectangle = useMemo(() => {\n      return new kakao.maps.Rectangle({\n        bounds: rectangleBounds,\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n        zIndex,\n      })\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useImperativeHandle(ref, () => rectangle, [rectangle])\n\n    useLayoutEffect(() => {\n      rectangle.setMap(map)\n      return () => rectangle.setMap(null)\n    }, [map, rectangle])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(rectangle)\n    }, [rectangle, onCreate])\n\n    useLayoutEffect(() => {\n      rectangle.setOptions({\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n      })\n    }, [\n      rectangle,\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n    ])\n\n    useLayoutEffect(() => {\n      rectangle.setBounds(rectangleBounds)\n    }, [rectangle, rectangleBounds])\n\n    useLayoutEffect(() => {\n      if (zIndex) rectangle.setZIndex(zIndex)\n    }, [rectangle, zIndex])\n\n    useKakaoEvent(rectangle, \"mouseover\", onMouseover)\n    useKakaoEvent(rectangle, \"mouseout\", onMouseout)\n    useKakaoEvent(rectangle, \"mousemove\", onMousemove)\n    useKakaoEvent(rectangle, \"mousedown\", onMousedown)\n    useKakaoEvent(rectangle, \"click\", onClick)\n\n    return null\n  }\n)\n\nexport default Rectangle\n","import React, { useImperativeHandle, useLayoutEffect, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface EllipseProps {\n  /**\n   * 중심 좌표를 지정합니다.\n   */\n  center: {\n    lat: number\n    lng: number\n  }\n  /**\n   * 미터 단위의 x축 반지름\n   */\n  rx: number\n\n  /**\n   * 미터 단위의 y축 반지름\n   */\n  ry: number\n\n  /**\n   * #xxxxxx 형태의 채움 색 (기본값: ‘#F10000’)\n   */\n  fillColor?: string\n\n  /**\n   * 채움 불투명도 (0-1) (기본값: 0)\n   */\n  fillOpacity?: number\n\n  /**\n   * 픽셀 단위의 선 두께 (기본값: 3)\n   */\n  strokeWeight?: number\n\n  /**\n   * #xxxxxx 형태의 선 색 (기본값: ‘#F10000’)\n   */\n  strokeColor?: string\n\n  /**\n   * 선 불투명도 (0-1) (기본값: 0.6)\n   */\n  strokeOpacity?: number\n\n  /**\n   * 선 스타일 (기본값: ‘solid’)\n   */\n  strokeStyle?: kakao.maps.StrokeStyles\n\n  /**\n   * 타원의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 타원에 마우스 커서를 올리면 발생한다.\n   */\n  onMouseover?: (\n    target: kakao.maps.Ellipse,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 커서가 타원에서 벗어나면 발생한다.\n   */\n  onMouseout?: (\n    target: kakao.maps.Ellipse,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 타원에서 마우스를 움직이면 발생한다.\n   */\n  onMousemove?: (\n    target: kakao.maps.Ellipse,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 타원에서 마우스 버튼을 누르면 발생한다.\n   */\n  onMousedown?: (\n    target: kakao.maps.Ellipse,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 타원을 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Ellipse,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 객체 생성시 호출 됩니다.\n   */\n  onCreate?: (target: kakao.maps.Ellipse) => void\n}\n\n/**\n * Map 상에 타원을 그립니다.\n */\nconst Ellipse = React.forwardRef<kakao.maps.Ellipse, EllipseProps>(\n  (\n    {\n      center,\n      rx,\n      ry,\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n      zIndex,\n      onMouseover,\n      onMouseout,\n      onMousemove,\n      onMousedown,\n      onClick,\n      onCreate,\n    },\n    ref\n  ) => {\n    const map = useMap(`Ellipse`)\n\n    const ellipseCenter = useMemo(() => {\n      return new kakao.maps.LatLng(center.lat, center.lng)\n    }, [center.lat, center.lng])\n\n    const ellipse = useMemo(() => {\n      return new kakao.maps.Ellipse({\n        center: ellipseCenter,\n        rx,\n        ry,\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n        zIndex,\n      })\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useImperativeHandle(ref, () => ellipse, [ellipse])\n\n    useLayoutEffect(() => {\n      ellipse.setMap(map)\n\n      return () => {\n        ellipse.setMap(null)\n      }\n    }, [map, ellipse])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(ellipse)\n    }, [ellipse, onCreate])\n\n    useLayoutEffect(() => {\n      if (ellipse) ellipse.setPosition(ellipseCenter)\n    }, [ellipse, ellipseCenter])\n\n    useLayoutEffect(() => {\n      ellipse.setRadius(rx, ry)\n    }, [ellipse, rx, ry])\n\n    useLayoutEffect(() => {\n      if (!zIndex) return\n      ellipse.setZIndex(zIndex)\n    }, [ellipse, zIndex])\n\n    useLayoutEffect(() => {\n      ellipse.setOptions({\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n      })\n    }, [\n      ellipse,\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n    ])\n\n    useKakaoEvent(ellipse, \"mouseover\", onMouseover)\n    useKakaoEvent(ellipse, \"mouseout\", onMouseout)\n    useKakaoEvent(ellipse, \"mousemove\", onMousemove)\n    useKakaoEvent(ellipse, \"mousedown\", onMousedown)\n    useKakaoEvent(ellipse, \"click\", onClick)\n\n    return null\n  }\n)\n\nexport default Ellipse\n","import React, { useImperativeHandle, useLayoutEffect, useMemo } from \"react\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface AbstractOverlayProps {\n  /**\n   * AbstractOverlay에서 필요한 `onAdd` 함수를 구현 합니다.\n   * 위치를 재조정할 필요가 있을 때 호출된다.\n   * 이 함수 내에서 엘리먼트의 위치를 잡아주어야 한다.\n   *\n   * 이때 arrow 함수가 아닌 일반 funtion으로 하여 this 바인딩이 되도록 하여 AbstractOverlay를 상속 받은 객체에 접근하여 필요 기능을 정의 합니다.\n   * ```tsx\n   * const panel = (this as kakao.maps.AbstractOverlay).getPanels().overlayLayer\n   * panel.appendChild(node.current)\n   * ```\n   */\n  draw: () => void\n  /**\n   * 지도에 올릴 때 호출된다.\n   * setMap(map) 을 실행하면 이 함수가 실행된다.\n   * 이 함수 내에서 생성된 `DOM` 객체를 MapPanels에 자식 노드로 넣어주도록 한다.\n   *\n   * ```tsx\n   * var projection = this.getProjection()\n   * var point = projection.pointFromCoords(positionLatlng)\n   * var width = node.current.offsetWidth\n   * var height = node.current.offsetHeight\n   *\n   * console.log(point, width, height)\n   *\n   * node.current.style.left = point.x - width / 2 + \"px\"\n   * node.current.style.top = point.y - height / 2 + \"px\"\n   * ```\n   */\n  onAdd: () => void\n\n  /**\n   * 지도에서 제거할 때 호출된다.\n   * setMap(null) 을 실행하면 이 함수가 실행된다.\n   * 이 함수 내에서 MapPanels에 자식 노드로 넣어준 엘리먼트를 제거하도록 한다.\n   *\n   * ```tsx\n   * this.node.parentNode.removeChild(this.node);\n   * ```\n   */\n  onRemove: () => void\n\n  /**\n   * 생성된 kakao.maps.AbstractOverlay 객체를 받을 수 있는 CallBack 함수 입니다.\n   */\n  onCreate?: (target: kakao.maps.AbstractOverlay) => void\n}\n\n/**\n * `API` 사용자가 직접 정의할 수 있는 오버레이.\n * AbstractOverlay를 상속 받아 사용할 객체를 생성하고 prototype을 연결해 준다.\n * 온전히 동작하는 오버레이를 만들고자 한다면 3가지 인터페이스 메소드( onAdd, draw, onRemove )를 구현해야 한다.\n *\n * 해당 Component 내부에서 `ReactAbstractOveraly` class를 만들어 `onAdd`, `draw`, `onRemove` 를 연결한 후 React Life Cycle에 맞춰 `setMap` 를 자동으로 호출 합니다.\n *\n * *경고* `draw`, `onAdd`, `onRemove` 의 경우 반드시 익명함수가 **아닌** 형태로 만들어서 전달해야 합니다.\n * `this.~` 를 통한 접근이 가능하니 해당 부분을 이용해서 구현 해주세요!\n *\n * ### Example Code\n *\n * ```jsx live\n * function () {\n *  const TooltipMarker = ({\n *    position,\n *  }) => {\n *    const node = useRef(document.createElement(\"div\"))\n *\n *    const positionLatlng = useMemo(() => {\n *      return new kakao.maps.LatLng(position.lat, position.lng)\n *    }, [position.lat, position.lng])\n *\n *    function onAdd() {\n *      const panel = this.getPanels()\n *        .overlayLayer\n *      panel.appendChild(node.current)\n *    }\n *\n *    function onRemove() {\n *      node.current.parentNode.removeChild(node.current)\n *    }\n *\n *    function draw() {\n *      var projection = this.getProjection()\n *      var point = projection.pointFromCoords(positionLatlng)\n *      var width = node.current.offsetWidth\n *      var height = node.current.offsetHeight\n *\n *      console.log(point, width, height)\n *\n *      node.current.style.left = point.x - width / 2 + \"px\"\n *      node.current.style.top = point.y - height / 2 + \"px\"\n *    }\n *\n *    useEffect(() => {\n *      node.current.style.position = \"absolute\"\n *      node.current.style.whiteSpace = \"nowrap\"\n *    }, [])\n *\n *    return (\n *      <>\n *        <AbstractOverlay onAdd={onAdd} onRemove={onRemove} draw={draw} />\n *        {ReactDOM.createPortal(\n *          <div\n *            style={{\n *              color: \"#000\",\n *              backgroundColor: \"#fff\",\n *              padding: \"5px\",\n *              borderRadius: \"15px\",\n *            }}\n *          >\n *            Hello Marker!\n *          </div>,\n *          node.current\n *        )}\n *      </>\n *    )\n *  }\n *\n *  return (\n *    <>\n *      <Map // 지도를 표시할 Container\n *        center={{\n *          // 지도의 중심좌표\n *          lat: 37.54699,\n *          lng: 127.09598,\n *        }}\n *        style={{\n *          // 지도의 크기\n *          width: \"100%\",\n *          height: \"450px\",\n *        }}\n *        level={3} // 지도의 확대 레벨\n *      >\n *        <TooltipMarker\n *          position={{\n *            lat: 37.54699,\n *            lng: 127.09598,\n *          }}\n *        />\n *      </Map>\n *    </>\n *  )\n *}\n * ```\n */\nconst AbstractOverlay = React.forwardRef<\n  kakao.maps.AbstractOverlay,\n  AbstractOverlayProps\n>(({ draw, onAdd, onRemove, onCreate }, ref) => {\n  const map = useMap()\n\n  const reactAbstractOverlay = useMemo(() => {\n    class ReactAbstractOveraly extends kakao.maps.AbstractOverlay {\n      constructor(draw: () => void, onAdd: () => void, onRemove: () => void) {\n        super()\n        this.draw = draw\n        this.onAdd = onAdd\n        this.onRemove = onRemove\n      }\n    }\n    const overlay = new ReactAbstractOveraly(draw, onAdd, onRemove)\n    return overlay\n  }, [draw, onAdd, onRemove])\n\n  useImperativeHandle(ref, () => reactAbstractOverlay, [reactAbstractOverlay])\n\n  useLayoutEffect(() => {\n    reactAbstractOverlay.setMap(map)\n\n    return () => {\n      reactAbstractOverlay.setMap(null)\n    }\n  }, [map, reactAbstractOverlay])\n\n  useLayoutEffect(() => {\n    if (onCreate) onCreate(reactAbstractOverlay)\n  }, [reactAbstractOverlay, onCreate])\n\n  return null\n})\n\nexport default AbstractOverlay\n","import React, { useImperativeHandle, useRef, useState } from \"react\"\nimport useIsomorphicLayoutEffect from \"../hooks/useIsomorphicLayoutEffect\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport {\n  PolymorphicComponentProps,\n  PolymorphicComponentPropsWithOutRef,\n} from \"../types\"\nimport { Loader } from \"../util/kakaoMapApiLoader\"\n\nexport const KakaoRoadviewContext = React.createContext<kakao.maps.Roadview>(\n  undefined as unknown as kakao.maps.Roadview\n)\n\nexport interface RoadviewProps {\n  /**\n   * 중심으로 설정할 위치 입니다.\n   * 해당 lat와 lng에 해당하는 radius범위 안에서 가장가까운 Roadview을 선택합니다.\n   * 만약 없다면 lat, lng로 설정 됩니다.\n   */\n  position: {\n    lat: number\n    lng: number\n    radius: number\n  }\n\n  /**\n   * 로드뷰 시작 지역의 고유 아이디 값.\n   */\n  panoId?: number\n\n  /**\n   * panoId가 유효하지 않을 경우 지도좌표를 기반으로 데이터를 요청할 수평 좌표값.\n   */\n  panoX?: number\n\n  /**\n   * panoId가 유효하지 않을 경우 지도좌표를 기반으로 데이터를 요청할 수직 좌표값.\n   */\n  panoY?: number\n\n  /**\n   * 로드뷰 처음 실행시에 바라봐야 할 수평 각. 0이 정북방향. (0_360)\n   */\n  pan?: number\n\n  /**\n   * 로드뷰 처음 실행시에 바라봐야 할 수직 각.(-90_90)\n   */\n  tilt?: number\n\n  /**\n   * 로드뷰 줌 초기값.(-3_3)\n   */\n  zoom?: number\n\n  /**\n   * 로드뷰 생성후 해당 객체를 전달하는 callback.\n   */\n  onCreate?: (roadview: kakao.maps.Roadview) => void\n\n  /**\n   * 로드뷰가 초기화를 끝내면 발생한다.\n   */\n  onInit?: (target: kakao.maps.Roadview) => void\n\n  /**\n   * 파노라마 ID가 바뀌면 발생한다.\n   */\n  onPanoidChange?: (target: kakao.maps.Roadview) => void\n\n  /**\n   * 시점이 바뀌면 발생한다.\n   */\n  onViewpointChange?: (target: kakao.maps.Roadview) => void\n\n  /**\n   * 지도 좌표가 바뀌면 발생한다.\n   */\n  onPositionChanged?: (target: kakao.maps.Roadview) => void\n\n  /**\n   * getNearestPanoId 동작 실패시 호출 합니다.\n   */\n  onErrorGetNearestPanoId?: (target: kakao.maps.Roadview) => void\n}\n\ntype RoadviewComponent = <T extends React.ElementType = \"div\">(\n  props: PolymorphicComponentPropsWithOutRef<T, RoadviewProps> &\n    React.RefAttributes<kakao.maps.Roadview>\n) => React.ReactElement | null\n\n/**\n * Roadview를 Roadview를 생성하는 컴포넌트 입니다.\n * props로 받는 `on*` 이벤트는 해당 `kakao.maps.Map` 객체를 반환 합니다.\n * `onCreate` 이벤트를 통해 생성 후 `Roadview` 객체에 직접 접근하여 초기 설정이 가능합니다.\n */\nconst Roadview: RoadviewComponent = React.forwardRef(\n  <T extends React.ElementType = \"div\">(\n    {\n      id,\n      as,\n      children,\n      position,\n      pan,\n      panoId,\n      panoX,\n      panoY,\n      tilt,\n      zoom,\n      onCreate,\n      onInit,\n      onPanoidChange,\n      onPositionChanged,\n      onViewpointChange,\n      onErrorGetNearestPanoId,\n      ...props\n    }: PolymorphicComponentProps<T, React.PropsWithChildren<RoadviewProps>>,\n    ref: React.ForwardedRef<kakao.maps.Roadview>\n  ) => {\n    const Container = as || \"div\"\n    const [isLoaded, setIsLoaded] = useState(false)\n    const [isLoading, setIsLoading] = useState(true)\n    const [roadview, setRoadview] = useState<kakao.maps.Roadview>()\n    const container = useRef<HTMLDivElement>(null)\n\n    useIsomorphicLayoutEffect(() => {\n      Loader.isLoaded().then(setIsLoaded)\n    }, [])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!isLoaded) return\n\n      const RoadviewContainer = container.current\n\n      if (!RoadviewContainer) return\n\n      const kakaoRoadview = new kakao.maps.Roadview(RoadviewContainer, {\n        pan: pan,\n        panoId: panoId,\n        panoX: panoX,\n        panoY: panoY,\n        tilt: tilt,\n        zoom: zoom,\n      })\n\n      setRoadview(kakaoRoadview)\n\n      return () => {\n        RoadviewContainer.innerHTML = \"\"\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isLoaded, panoX, panoY, zoom])\n\n    useImperativeHandle(ref, () => roadview!, [roadview])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!roadview || !onCreate) return\n      onCreate(roadview)\n    }, [roadview, onCreate])\n\n    useIsomorphicLayoutEffect(() => {\n      if (\n        !roadview ||\n        panoId ||\n        (roadview.getPosition().getLat() === position.lat &&\n          roadview.getPosition().getLng() === position.lng)\n      )\n        return\n\n      const newPostion = new kakao.maps.LatLng(position.lat, position.lng)\n\n      new kakao.maps.RoadviewClient().getNearestPanoId(\n        newPostion,\n        position.radius,\n        (panoId) => {\n          if (panoId === null && onErrorGetNearestPanoId) {\n            onErrorGetNearestPanoId(roadview)\n          } else {\n            roadview.setPanoId(panoId, newPostion)\n          }\n        }\n      )\n    }, [\n      roadview,\n      panoId,\n      position.lat,\n      position.lng,\n      position.radius,\n      onErrorGetNearestPanoId,\n    ])\n\n    useIsomorphicLayoutEffect(() => {\n      if (\n        !roadview ||\n        !panoId ||\n        panoId === roadview.getPanoId() ||\n        (roadview.getPosition().getLat() === position.lat &&\n          roadview.getPosition().getLng() === position.lng)\n      )\n        return\n\n      const newPostion = new kakao.maps.LatLng(position.lat, position.lng)\n      roadview.setPanoId(panoId, newPostion)\n    }, [roadview, panoId, position.lat, position.lng])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!roadview) return\n\n      const prevViewpoint = roadview.getViewpoint()\n\n      if (prevViewpoint.pan === pan && prevViewpoint.tilt === tilt) return\n\n      if (pan) prevViewpoint.pan = pan\n      if (tilt) prevViewpoint.tilt = tilt\n      roadview.setViewpoint(prevViewpoint)\n    }, [roadview, pan, tilt])\n\n    useKakaoEvent(roadview, \"init\", (target) => {\n      setIsLoading(false)\n      if (onInit) onInit(target)\n    })\n    useKakaoEvent(roadview, \"panoid_changed\", onPanoidChange)\n    useKakaoEvent(roadview, \"viewpoint_changed\", onViewpointChange)\n    useKakaoEvent(roadview, \"position_changed\", onPositionChanged)\n\n    return (\n      <>\n        <Container\n          ref={container}\n          id={id || \"react-kakao-maps-sdk-roadview-container\"}\n          {...props}\n        />\n        {roadview && !isLoading && (\n          <KakaoRoadviewContext.Provider value={roadview}>\n            {children}\n          </KakaoRoadviewContext.Provider>\n        )}\n      </>\n    )\n  }\n)\n\nexport default Roadview\n","import { useContext } from \"react\"\nimport { KakaoRoadviewContext } from \"../components/Roadview\"\n\n/**\n * kakao roadview 객체를 가져오는 hook 입니다.\n * Roadview 객체 내부가 아니라면 Error를 발생 시킵니다.\n */\nconst useRoadview = (componentName?: string) => {\n  const kakaoRoadview = useContext(KakaoRoadviewContext)\n  if (!kakaoRoadview) {\n    throw new Error(\n      `${\n        componentName ? componentName + \" Component\" : \"useRoadview\"\n      } must exist inside Roadview Component!`\n    )\n  }\n\n  return kakaoRoadview\n}\n\nexport default useRoadview\n","import React, {\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from \"react\"\nimport ReactDOM from \"react-dom\"\nimport useRoadview from \"../hooks/useRoadview\"\n\nexport interface CustomOverlayRoadviewProps {\n  /**\n   * 커스텀 오버레이의 좌표\n   */\n  position:\n    | {\n        lat: number\n        lng: number\n      }\n    | {\n        /**\n         * 가로 각도, 0부터 360 사이의 값으로 북쪽부터 시계방향으로 대응한다.\n         */\n        pan: number\n        /**\n         * 세로 각도, -90부터 90 사이의 값으로 위쪽부터 아래쪽으로 대응한다.\n         */\n        tilt: number\n        /**\n         * 확대 수준, -3부터 3 사이의 정수이다.\n         */\n        zoom?: number\n        /**\n         * 특정 위치의 로드뷰 고유의 아이디 값\n         */\n        panoId?: number\n      }\n  /**\n   * true 로 설정하면 컨텐츠 영역을 클릭했을 경우 지도 이벤트를 막아준다.\n   */\n  clickable?: boolean\n\n  /**\n   * 컨텐츠의 x축 위치. 0_1 사이의 값을 가진다. 기본값은 0.5\n   */\n  xAnchor?: number\n\n  /**\n   * 컨텐츠의 y축 위치. 0_1 사이의 값을 가진다. 기본값은 0.5\n   */\n  yAnchor?: number\n\n  /**\n   * 커스텀 오버레이의 z-index\n   */\n  zIndex?: number\n\n  /**\n   * 로드뷰상에서 커스텀 오버레이의 높이(위치)를 지정한다.\n   * 단위는 m(미터)이며 현재 로드뷰의 바닥 높이를 기준으로 떨어져있는 높이를 말한다.\n   */\n  altitude?: number\n\n  /**\n   * 커스텀 오버레이의 가시반경을 설정한다.\n   * 로드뷰의 위치와 커스텀 오버레이의 위치 사이의 거리가 가시반경 이내일 경우에만 로드뷰상에 노출된다.\n   * 단위는 m(미터)이며 기본값은 500m이다.\n   */\n  range?: number\n\n  /**\n   * 커스텀 오버레이를 생성 후 해당 객체를 가지고 callback 함수를 실행 시켜줌\n   */\n  onCreate?: (customOverlay: kakao.maps.CustomOverlay) => void\n}\n\n/**\n * Roadview에 CustomOverlay를 올릴 때 사용하는 컴포넌트 입니다.\n * `onCreate` 이벤트 또는 `ref` 객체를 통해서 `CustomOverlay` 객체에 직접 접근 및 초기 설정 작업을 지정할 수 있습니다.\n */\nconst CustomOverlayRoadview = React.forwardRef<\n  kakao.maps.CustomOverlay,\n  React.PropsWithChildren<CustomOverlayRoadviewProps>\n>(\n  (\n    {\n      position,\n      children,\n      clickable,\n      xAnchor,\n      yAnchor,\n      zIndex,\n      altitude,\n      range,\n      onCreate,\n    },\n    ref\n  ) => {\n    const roadview = useRoadview(`CustomOverlayRoadview`)\n    const container = useRef(document.createElement(\"div\"))\n\n    const overlayPosition = useMemo(() => {\n      if (\"lat\" in position) {\n        return new kakao.maps.LatLng(position.lat, position.lng)\n      }\n      return new kakao.maps.Viewpoint(\n        position.pan,\n        position.tilt,\n        position.zoom,\n        position.panoId\n      )\n      /* eslint-disable react-hooks/exhaustive-deps */\n    }, [\n      // @ts-ignore\n      position.lat,\n      // @ts-ignore\n      position.lng,\n      // @ts-ignore\n      position.pan,\n      // @ts-ignore\n      position.tilt,\n      // @ts-ignore\n      position.zoom,\n      // @ts-ignore\n      position.panoId,\n    ])\n    /* eslint-enable react-hooks/exhaustive-deps */\n\n    const overlay = useMemo(() => {\n      const KakaoCustomOverlay = new kakao.maps.CustomOverlay({\n        clickable: clickable,\n        xAnchor: xAnchor,\n        yAnchor: yAnchor,\n        zIndex: zIndex,\n        position: overlayPosition,\n        content: container.current,\n      })\n      container.current.style.display = \"none\"\n      return KakaoCustomOverlay\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [clickable, xAnchor, yAnchor])\n\n    useImperativeHandle(ref, () => overlay, [overlay])\n\n    useLayoutEffect(() => {\n      if (!roadview) return\n\n      overlay.setMap(roadview)\n\n      return () => {\n        overlay.setMap(null)\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [overlay, roadview])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(overlay)\n    }, [overlay, onCreate])\n\n    useLayoutEffect(() => {\n      overlay.setPosition(overlayPosition)\n    }, [overlay, overlayPosition])\n\n    useLayoutEffect(() => {\n      if (!zIndex) return\n      overlay.setZIndex(zIndex)\n    }, [overlay, zIndex])\n\n    useLayoutEffect(() => {\n      if (!altitude) return\n      overlay.setAltitude(altitude)\n    }, [overlay, altitude])\n\n    useLayoutEffect(() => {\n      if (!range) return\n      overlay.setRange(range)\n    }, [overlay, range])\n\n    return (\n      container.current.parentElement &&\n      ReactDOM.createPortal(children, container.current.parentElement)\n    )\n  }\n)\n\nexport default CustomOverlayRoadview\n","import React, { useMemo } from \"react\"\nimport useRoadview from \"../hooks/useRoadview\"\nimport Marker from \"./Marker\"\n\nexport interface RoadviewMarkerProps {\n  /**\n   * 표시 위치\n   */\n  position:\n    | {\n        lat: number\n        lng: number\n      }\n    | {\n        x: number\n        y: number\n      }\n    | {\n        /**\n         * 가로 각도, 0부터 360 사이의 값으로 북쪽부터 시계방향으로 대응한다.\n         */\n        pan: number\n        /**\n         * 세로 각도, -90부터 90 사이의 값으로 위쪽부터 아래쪽으로 대응한다.\n         */\n        tilt: number\n        /**\n         * 확대 수준, -3부터 3 사이의 정수이다.\n         */\n        zoom?: number\n        /**\n         * 특정 위치의 로드뷰 고유의 아이디 값\n         */\n        panoId?: number\n      }\n\n  image?: {\n    /**\n     * 표시 이미지 src\n     */\n    src: string\n\n    /**\n     * 표시 이미지 크기\n     */\n    size: {\n      width: number\n      height: number\n    }\n\n    options?: {\n      /**\n       * 마커 이미지의 alt 속성값을 정의한다.\n       */\n      alt?: string\n\n      /**\n       * 마커의 클릭 또는 마우스오버 가능한 영역을 표현하는 좌표값\n       */\n      coords?: string\n\n      /**\n       * 마커의 좌표에 일치시킬 이미지 안의 좌표 (기본값: 이미지의 가운데 아래)\n       */\n      offset?: { x: number; y: number }\n\n      /**\n       * 마커의 클릭 또는 마우스오버 가능한 영역의 모양\n       */\n      shape?: \"default\" | \"rect\" | \"circle\" | \"poly\"\n\n      /**\n       * 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\n       */\n      spriteOrigin?: { x: number; y: number }\n\n      /**\n       * 스프라이트 이미지의 전체 크기\n       */\n      spriteSize?: { width: number; height: number }\n    }\n  }\n\n  /**\n   * click 이벤트 핸들러\n   */\n  onClick?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseover 이벤트 핸들러\n   */\n  onMouseOver?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseout 이벤트 핸들러\n   */\n  onMouseOut?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragstart 이벤트 핸들러\n   */\n  onDragStart?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragend 이벤트 핸들러\n   */\n  onDragEnd?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * Maker 생성 이벤트 핸들러\n   */\n  onCreate?: (maker: kakao.maps.Marker) => void\n\n  /**\n   * 마커 엘리먼트의 타이틀 속성 값 (툴팁)\n   */\n  title?: string\n\n  /**\n   * 클릭 가능한 마커\n   */\n  clickable?: boolean\n\n  /**\n   * 마커 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마커 투명도 (0-1)\n   */\n  opacity?: number\n\n  /**\n   * 로드뷰에 올라있는 마커의 높이 값(m 단위)\n   */\n  altitude?: number\n\n  /**\n   * 로드뷰 상에서 마커의 가시반경(m 단위), 두 지점 사이의 거리가 지정한 값보다 멀어지면 마커는 로드뷰에서 보이지 않게 된다.\n   */\n  range?: number\n\n  /**\n   * InfoWindow 옵션\n   */\n  infoWindowOptions?: {\n    /**\n     * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부 (기본값: false)\n     */\n    disableAutoPan?: boolean\n\n    /**\n     * 삭제 가능한 인포윈도우\n     */\n    removable?: boolean\n\n    /**\n     * 인포윈도우 엘리먼트의 z-index 속성 값\n     */\n    zIndex?: number\n  }\n}\n\n/**\n * Map에서 Marker를 생성할 때 사용 합니다.\n * `onCreate` 이벤트를 통해 생성 후 `maker` 객체에 직접 접근하여 초기 설정이 가능합니다.\n */\nconst RoadviewMarker = React.forwardRef<\n  kakao.maps.Marker,\n  React.PropsWithChildren<RoadviewMarkerProps>\n>(\n  (\n    {\n      image,\n      position,\n      children,\n      altitude,\n      clickable,\n      infoWindowOptions,\n      onClick,\n      onDragEnd,\n      onDragStart,\n      onMouseOut,\n      onMouseOver,\n      onCreate,\n      opacity,\n      range,\n      title,\n      zIndex,\n    },\n    ref\n  ) => {\n    const roadview = useRoadview(`RoadviewMarker`)\n\n    const markerImage = useMemo(() => {\n      return (\n        image &&\n        new kakao.maps.MarkerImage(\n          image.src,\n          new kakao.maps.Size(image.size.width, image.size.height),\n          {\n            alt: image.options?.alt,\n            coords: image.options?.coords,\n            offset:\n              image.options?.offset &&\n              new kakao.maps.Point(\n                image.options?.offset.x,\n                image.options?.offset.y\n              ),\n            shape: image.options?.shape,\n            spriteOrigin:\n              image.options?.spriteOrigin &&\n              new kakao.maps.Point(\n                image.options?.spriteOrigin.x,\n                image.options?.spriteOrigin.y\n              ),\n            spriteSize:\n              image.options?.spriteSize &&\n              new kakao.maps.Size(\n                image.options?.spriteSize.width,\n                image.options?.spriteSize.height\n              ),\n          }\n        )\n      )\n    }, [image])\n\n    const markerPosition = useMemo(() => {\n      if (\"lat\" in position) {\n        return new kakao.maps.LatLng(position.lat, position.lng)\n      }\n      if (\"x\" in position) {\n        return new kakao.maps.Coords(position.x, position.y).toLatLng()\n      }\n      return new kakao.maps.Viewpoint(\n        position.pan,\n        position.tilt,\n        position.zoom,\n        position.panoId\n      )\n\n      /* eslint-disable react-hooks/exhaustive-deps */\n    }, [\n      // @ts-ignore\n      position.lat,\n      // @ts-ignore\n      position.lng,\n      // @ts-ignore\n      position.x,\n      // @ts-ignore\n      position.y,\n      // @ts-ignore\n      position.pan,\n      // @ts-ignore\n      position.tilt,\n      // @ts-ignore\n      position.zoom,\n      // @ts-ignore\n      position?.panoId,\n    ])\n    /* eslint-enable react-hooks/exhaustive-deps */\n\n    return (\n      <Marker\n        map={roadview}\n        position={markerPosition}\n        image={markerImage}\n        altitude={altitude}\n        clickable={clickable}\n        infoWindowOptions={infoWindowOptions}\n        onClick={onClick}\n        onDragEnd={onDragEnd}\n        onDragStart={onDragStart}\n        onMouseOut={onMouseOut}\n        onMouseOver={onMouseOver}\n        onCreate={onCreate}\n        opacity={opacity}\n        range={range}\n        title={title}\n        zIndex={zIndex}\n        ref={ref}\n      >\n        {children}\n      </Marker>\n    )\n  }\n)\n\nexport default RoadviewMarker\n","import React, { useMemo } from \"react\"\nimport InfoWindow from \"./InfoWindow\"\nimport useRoadview from \"../hooks/useRoadview\"\n\nexport interface RoadviewInfoWindowProps {\n  /**\n   * 인포윈도가 표시될 위치\n   */\n  position:\n    | {\n        lat: number\n        lng: number\n      }\n    | {\n        /**\n         * 가로 각도, 0부터 360 사이의 값으로 북쪽부터 시계방향으로 대응한다.\n         */\n        pan: number\n        /**\n         * 세로 각도, -90부터 90 사이의 값으로 위쪽부터 아래쪽으로 대응한다.\n         */\n        tilt: number\n        /**\n         * 확대 수준, -3부터 3 사이의 정수이다.\n         */\n        zoom?: number\n        /**\n         * 특정 위치의 로드뷰 고유의 아이디 값\n         */\n        panoId?: number\n      }\n\n  /**\n   * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부 (기본값: false)\n   */\n  disableAutoPan?: boolean\n\n  /**\n   * 삭제 가능한 인포윈도우\n   */\n  removable?: boolean\n\n  /**\n   * 인포윈도우 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 로드뷰에 올라있는 인포윈도우의 높이 값(m 단위)\n   */\n  altitude?: number\n\n  /**\n   * 로드뷰 상에서 인포윈도우의 가시반경(m 단위), 두 지점 사이의 거리가 지정한 값보다 멀어지면 인포윈도우는 보이지 않게 된다\n   */\n  range?: number\n\n  /**\n   * 인포윈도우 객체 생성후 해당 객체를 반환하는 함수\n   */\n  onCreate?: (infoWindow: kakao.maps.InfoWindow) => void\n}\n\n/**\n * Map 컴포넌트에서 InfoWindow를 그릴 때 사용됩니다.\n * `onCreate` 이벤트를 통해 생성 후 `infoWindow` 객체에 직접 접근하여 초기 설정이 가능합니다.\n */\nconst RoadviewInfoWindow = React.forwardRef<\n  kakao.maps.InfoWindow,\n  React.PropsWithChildren<RoadviewInfoWindowProps>\n>(\n  (\n    {\n      position,\n      children,\n      altitude,\n      disableAutoPan,\n      range,\n      removable,\n      zIndex,\n      onCreate,\n    },\n    ref\n  ) => {\n    const roadview = useRoadview(`RoadviewInfoWindow`)\n    const infoPosition = useMemo(() => {\n      if (\"lat\" in position) {\n        return new kakao.maps.LatLng(position.lat, position.lng)\n      }\n      return new kakao.maps.Viewpoint(\n        position.pan,\n        position.tilt,\n        position.zoom,\n        position.panoId\n      )\n      /* eslint-disable react-hooks/exhaustive-deps */\n    }, [\n      // @ts-ignore\n      position.lat,\n      // @ts-ignore\n      position.lng,\n      // @ts-ignore\n      position.pan,\n      // @ts-ignore\n      position.tilt,\n      // @ts-ignore\n      position.zoom,\n      // @ts-ignore\n      position.panoId,\n    ])\n    /* eslint-enable react-hooks/exhaustive-deps */\n\n    return (\n      <InfoWindow\n        altitude={altitude}\n        disableAutoPan={disableAutoPan}\n        range={range}\n        removable={removable}\n        zIndex={zIndex}\n        map={roadview}\n        position={infoPosition}\n        onCreate={onCreate}\n        ref={ref}\n      >\n        {children}\n      </InfoWindow>\n    )\n  }\n)\n\nexport default RoadviewInfoWindow\n","import React, {\n  ReactNode,\n  Ref,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n} from \"react\"\nimport useMap from \"../hooks/useMap\"\n\nexport const DrawingManagerContext =\n  React.createContext<kakao.maps.drawing.DrawingManager>(\n    undefined as unknown as kakao.maps.drawing.DrawingManager\n  )\n\nexport type DrawingManagerProps<\n  T extends kakao.maps.drawing.OverlayType = kakao.maps.drawing.OverlayType\n> = Partial<kakao.maps.drawing.OverlayOptions> &\n  Pick<kakao.maps.drawing.OverlayOptions, `${T}Options`> & {\n    /**\n     * 마우스 오버 시 가이드 툴팁 표시 여부. ‘draw’, ‘drag’, ‘edit’ 3가지를 지정할 수 있다 (기본값: 모두 표시 안함)\n     * 예를들어 [‘draw’]로 설정하면 객체를 그릴때 가이드 툴팁이 표시된다\n     */\n    guideTooltip?: Array<\"draw\" | \"drag\" | \"edit\">\n    /**\n     * 사용할 그리기 요소 지정한다 (기본값: 모든 그리기 요소)\n     */\n    drawingMode?: Array<T | `${T}`>\n\n    /**\n     * 그리기 요소를 선택하면 발생한다.\n     */\n    onSelect?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>,\n      event: kakao.maps.drawing.MouseEvent\n    ) => void\n\n    /**\n     * 그리기를 시작하면 발생한다.\n     */\n    onDrawstart?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>,\n      event: kakao.maps.drawing.MouseEvent\n    ) => void\n\n    /**\n     * 그리기 시작 후, 마우스를 이동하면 발생한다.\n     */\n    onDraw?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>,\n      event: kakao.maps.drawing.MouseEvent\n    ) => void\n\n    /**\n     * 그리기를 시작하면 발생한다.\n     */\n    onDrawend?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>,\n      event: kakao.maps.drawing.MouseEvent\n    ) => void\n\n    /**\n     * 다음 단계 그리기를 하면 발생한다. (Polyline, Polygon, Arrow 한정)\n     */\n    onDrawnext?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>,\n      event: kakao.maps.drawing.MouseEvent\n    ) => void\n\n    /**\n     * 그리기를 취소하면 발생한다.\n     */\n    onCancle?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>,\n      event: kakao.maps.drawing.MouseEvent\n    ) => void\n\n    /**\n     * 그리기 요소를 삭제하면 발생한다.\n     */\n    onRemove?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>,\n      event: kakao.maps.drawing.MouseEvent\n    ) => void\n\n    /**\n     * 그리기 요소들의 상태가 변경되면 발생한다.\n     * 각 요소의 생성/수정/이동/삭제 동작과 undo 또는 redo 함수 호출이 이에 해당한다.\n     */\n    onStateChanged?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>\n    ) => void\n\n    /**\n     * 객체 생성후 해당 이벤트가 발생합니다.\n     */\n    onCreate?: (drawingManager: kakao.maps.drawing.DrawingManager<T>) => void\n\n    /**\n     * Toolbox에 대해서 추가할 때 사용합니다.\n     */\n    children?: ReactNode\n  }\n\nfunction useDrawingManagerEvent<T extends kakao.maps.drawing.OverlayType>(\n  target: kakao.maps.drawing.DrawingManager<T> | undefined,\n  type:\n    | \"drawstart\"\n    | \"draw\"\n    | \"drawend\"\n    | \"drawnext\"\n    | \"select\"\n    | \"cancel\"\n    | \"remove\"\n    | \"state_changed\",\n  callback:\n    | ((target: kakao.maps.drawing.DrawingManager<T>, ...args: any) => void)\n    | undefined\n) {\n  useLayoutEffect(() => {\n    if (!target || !callback) return\n\n    const wrapCallback = (...arg: any[]) => {\n      if (arg === undefined) return callback(target)\n      else return callback(target, ...arg)\n    }\n\n    // @ts-ignore\n    target.addListener(type, wrapCallback)\n  }, [callback, target, type])\n}\n\n/**\n * 그리기 관리자 객체를 생성하는 컴포넌트 입니다.\n *\n * 초기 생성자에 필요한 Props는 최초 렌더링에만 반영을 하고 이후에는 값이 변경되더라도 적용되지 않습니다.\n *\n * > `on~` 시리즈를 제외한 props는 초기 렌더링 이후 작동 안함\n *\n * DrawingManager는 이전 Map, Marker, CustomOverlay와 달리 Props를 통해 제어를 하는 것이 아닌 직접 DrawingManager 객체를 이용하여 제어를 해야 합니다.\n *\n * 이를 위해 ref 객체를 통해 `DrawingManager` 객체를 접근 할 수 있으며, 이를 활용하여 여러 이벤트 처리 및 제어가 가능합니다.\n *\n * TypeScript 사용자를 위한 `Generic`이 적용되어 있으므로, `ref` 객체에 대한 typing 및 `drawingMode`에 대해 확실하게 정의해야 합니다.\n *\n * ```tsx\n * const Main = () => {\n *     const managerRef = useRef<kakao.maps.drawing.DrawingManager<\n *       kakao.maps.drawing.OverlayType.POLYLINE\n *     >>(null);\n *\n *     function selectOverlay(type: string) {\n *       const manager = managerRef.current;\n *       manager.cancel();\n *       manager.select(kakao.maps.drawing.OverlayType.POLYLINE);\n *     }\n *\n *     return (\n *       <>\n *         <Map\n *           center={{\n *             // 지도의 중심좌표\n *             lat: 33.450701,\n *             lng: 126.570667,\n *           }}\n *           style={{\n *             width: \"100%\",\n *             height: \"450px\",\n *           }}\n *           level={3} // 지도의 확대 레벨\n *         >\n *           <DrawingManager\n *             ref={managerRef}\n *             drawingMode={[\n *               kakao.maps.drawing.OverlayType.POLYLINE,\n *             ]}\n *             guideTooltip={['draw', 'drag', 'edit']}\n *             polylineOptions={{\n *               draggable: true,\n *               removable: true,\n *               editable: true\n *             }}\n *           />\n *         </Map>\n *         <button onClick={(e) => {\n *           selectOverlay('POLYLINE')\n *         }}>선</button>\n *       </>\n *     )\n *   }\n * ```\n *\n * > JavaScript 코드 버전\n *\n * ```jsx live\n * function() {\n *   const Main = () => {\n *     const managerRef = useRef(null);\n *\n *     function selectOverlay() {\n *       const manager = managerRef.current;\n *       manager.cancel();\n *       manager.select(kakao.maps.drawing.OverlayType.POLYLINE);\n *     }\n *\n *     return (\n *       <>\n *         <Map\n *           center={{\n *             // 지도의 중심좌표\n *             lat: 33.450701,\n *             lng: 126.570667,\n *           }}\n *           style={{\n *             width: \"100%\",\n *             height: \"450px\",\n *           }}\n *           level={3} // 지도의 확대 레벨\n *         >\n *           <DrawingManager\n *             ref={managerRef}\n *             drawingMode={[\n *               kakao.maps.drawing.OverlayType.POLYLINE,\n *             ]}\n *             guideTooltip={['draw', 'drag', 'edit']}\n *             polylineOptions={{\n *               draggable: true,\n *               removable: true,\n *               editable: true\n *             }}\n *           />\n *         </Map>\n *         <button onClick={selectOverlay}>선</button>\n *       </>\n *     )\n *   }\n *   return (<Main />)\n * }\n * ```\n */\nconst DrawingManager = React.forwardRef(function <\n  T extends kakao.maps.drawing.OverlayType\n>(\n  {\n    arrowOptions,\n    circleOptions,\n    ellipseOptions,\n    markerOptions,\n    polygonOptions,\n    polylineOptions,\n    rectangleOptions,\n    drawingMode,\n    guideTooltip,\n    onSelect,\n    onDrawstart,\n    onDraw,\n    onDrawend,\n    onDrawnext,\n    onCancle,\n    onRemove,\n    onStateChanged,\n    onCreate,\n    children,\n  }: DrawingManagerProps<T>,\n  ref: Ref<kakao.maps.drawing.DrawingManager<T>>\n) {\n  const map = useMap(\"Toolbox\")\n\n  const drawingManager = useMemo(\n    () => {\n      if (!window.kakao.maps.drawing) {\n        console.warn(\n          \"drawing 라이브러리를 별도 로드 해야 사용 가능합니다. `https://apis.map.kakao.com/web/guide/#loadlibrary`\"\n        )\n        return\n      }\n\n      return new kakao.maps.drawing.DrawingManager<T>({\n        // @ts-ignore\n        map,\n        drawingMode,\n        guideTooltip,\n        arrowOptions,\n        circleOptions,\n        ellipseOptions,\n        markerOptions,\n        polygonOptions,\n        polylineOptions,\n        rectangleOptions,\n      })\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  )\n  useImperativeHandle(ref, () => drawingManager!, [drawingManager])\n\n  useLayoutEffect(() => {\n    drawingManager && onCreate && onCreate(drawingManager)\n  }, [drawingManager, onCreate])\n\n  useDrawingManagerEvent(drawingManager, \"select\", onSelect)\n  useDrawingManagerEvent(drawingManager, \"drawstart\", onDrawstart)\n  useDrawingManagerEvent(drawingManager, \"draw\", onDraw)\n  useDrawingManagerEvent(drawingManager, \"drawend\", onDrawend)\n  useDrawingManagerEvent(drawingManager, \"drawnext\", onDrawnext)\n  useDrawingManagerEvent(drawingManager, \"cancel\", onCancle)\n  useDrawingManagerEvent(drawingManager, \"remove\", onRemove)\n  useDrawingManagerEvent(drawingManager, \"state_changed\", onStateChanged)\n\n  if (!drawingManager) return null\n\n  return (\n    <DrawingManagerContext.Provider value={drawingManager}>\n      {children}\n    </DrawingManagerContext.Provider>\n  )\n}) as unknown as <\n  T extends kakao.maps.drawing.OverlayType = kakao.maps.drawing.OverlayType\n>(\n  _props: DrawingManagerProps<T> &\n    React.RefAttributes<kakao.maps.drawing.DrawingManager<T>>\n) => null\n\nexport default DrawingManager\n","import React, {\n  Ref,\n  useContext,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n} from \"react\"\nimport useMap from \"../hooks/useMap\"\nimport { DrawingManagerContext } from \"./DrawingManager\"\n\nexport type ToolboxProps = {\n  /**\n   * Toolbox의 Position를 정의 한다.\n   */\n  position?: kakao.maps.ControlPosition\n}\n\n/**\n * 그리기 툴박스를 생성합니다.\n *\n * 해당 컴포넌트는 반드시 `DrawingManager` 컴포넌트의 자식으로 존재해야 합니다.\n */\nconst Toolbox = React.forwardRef(function (\n  { position }: ToolboxProps,\n  ref: Ref<kakao.maps.drawing.Toolbox>\n) {\n  position = position || kakao.maps.ControlPosition.TOP\n\n  const map = useMap(\"Toolbox\")\n  const drawingmanager = useContext(DrawingManagerContext)\n\n  if (!drawingmanager) {\n    throw new Error(\"Toolbox must exist inside DrawingManager Component!`\")\n  }\n\n  const toolbox = useMemo(\n    () =>\n      new kakao.maps.drawing.Toolbox({\n        drawingManager: drawingmanager,\n      }),\n    [drawingmanager]\n  )\n  useImperativeHandle(ref, () => toolbox, [toolbox])\n\n  useLayoutEffect(() => {\n    const element = toolbox.getElement()\n    map.addControl(element, position!)\n    return () => {\n      map.removeControl(element)\n    }\n  }, [map, toolbox, position])\n\n  return null\n})\n\nexport default Toolbox\n","import React, { useRef, useState, useImperativeHandle } from \"react\"\nimport useIsomorphicLayoutEffect from \"../hooks/useIsomorphicLayoutEffect\"\n\nexport interface StaticMapProps {\n  /**\n   * MapContinaer의 id에 대해서 지정합니다.\n   */\n  id?: string\n\n  /**\n   * MapContainer의 className에 대해서 지정합니다.\n   */\n  className?: string\n\n  /**\n   * MapContainer의 style에 대해서 지정합니다.\n   */\n  style?: React.CSSProperties\n\n  /**\n   * 중심으로 설정할 위치 입니다.\n   */\n  center: {\n    lat: number\n    lng: number\n  }\n\n  /**\n   * 확대 수준\n   * @default 3\n   */\n  level?: number\n\n  /**\n   * 지도 종류 (기본값: 일반 지도)\n   */\n  mapTypeId?: kakao.maps.MapTypeId\n\n  /**\n   * 이미지 지도에 표시할 마커 또는 마커 배열\n   */\n  marker:\n    | boolean\n    | {\n        /**\n         * 마커 tooltip에 표시될 내용\n         */\n        text?: string\n        /**\n         * 마커 포지션\n         */\n        position?: {\n          lat: number\n          lng: number\n        }\n      }\n    | Array<{\n        /**\n         * 마커 tooltip에 표시될 내용\n         */\n        text?: string\n        /**\n         * 마커 포지션\n         */\n        position: {\n          lat: number\n          lng: number\n        }\n      }>\n  /**\n   * StaticMap 생성 이벤트 핸들러\n   */\n  onCreate?: (maker: kakao.maps.StaticMap) => void\n}\n\nconst StaticMap = React.forwardRef<kakao.maps.StaticMap, StaticMapProps>(\n  (\n    {\n      id = \"react-kakao-maps-sdk-staticmap-container\",\n      style,\n      className,\n      center,\n      marker,\n      level,\n      mapTypeId,\n      onCreate,\n    },\n    ref\n  ) => {\n    const [map, setMap] = useState<kakao.maps.StaticMap>()\n    const container = useRef<HTMLDivElement>(null)\n\n    useIsomorphicLayoutEffect(() => {\n      if (!window.kakao) {\n        console.warn(\n          \"kakao map javascript api를 먼저 불러와야 합니다. `https://apis.map.kakao.com/web/guide`\"\n        )\n        return\n      }\n\n      const mapContainer = container.current\n      if (!mapContainer) return\n\n      kakao.maps.load(() => {\n        const _marker = (() => {\n          if (Array.isArray(marker)) {\n            return marker.map((mk) => {\n              return {\n                ...mk,\n                position: new kakao.maps.LatLng(\n                  mk.position.lat,\n                  mk.position.lng\n                ),\n              }\n            })\n          }\n          if (typeof marker === \"object\") {\n            if (!!marker.position) {\n              return {\n                ...marker,\n                position: new kakao.maps.LatLng(\n                  marker.position.lat,\n                  marker.position.lng\n                ),\n              }\n            }\n            return marker as { text: string }\n          }\n          return marker\n        })()\n        const kakaoStaticMap = new kakao.maps.StaticMap(mapContainer, {\n          center: new kakao.maps.LatLng(center.lat, center.lng),\n          level,\n          mapTypeId,\n          marker: _marker,\n        })\n\n        setMap(kakaoStaticMap)\n      })\n    }, [JSON.stringify(marker)])\n\n    useImperativeHandle(ref, () => map!, [map])\n\n    useIsomorphicLayoutEffect(() => {\n      if (map) map.setCenter(new kakao.maps.LatLng(center.lat, center.lng))\n    }, [map, center.lat, center.lng])\n\n    useIsomorphicLayoutEffect(() => {\n      if (map && level) map.setLevel(level)\n    }, [map, level])\n\n    useIsomorphicLayoutEffect(() => {\n      if (map && mapTypeId) map.setMapTypeId(mapTypeId)\n    }, [map, mapTypeId])\n\n    useIsomorphicLayoutEffect(() => {\n      if (map && onCreate) onCreate(map)\n    }, [map, onCreate])\n\n    return (\n      <div id={id} style={style} className={className} ref={container}></div>\n    )\n  }\n)\n\nexport default StaticMap\n","import { useEffect, useMemo, useState } from \"react\"\nimport { Loader, LoaderOptions } from \"../util/kakaoMapApiLoader\"\n\n/**\n * Kakao Map Api를 injection 합니다.\n *\n * 해당 hook은 cleanup 시점에도 Kakao Map Api를 제거 하지 않고, 동일한 hook를 여러 위치에서 호출 하더라도 최초 한번만 injection 됩니다.\n */\nconst useInjectKakaoMapApi = (options: LoaderOptions) => {\n  const [state, setState] = useState<{\n    loading: boolean\n    error: ErrorEvent | undefined\n  }>({\n    loading: true,\n    error: undefined,\n  })\n\n  const loader = useMemo(\n    () => new Loader(options),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [JSON.stringify(options)]\n  )\n\n  useEffect(() => {\n    loader\n      .load()\n      .then(() =>\n        setState({\n          loading: false,\n          error: undefined,\n        })\n      )\n      .catch((error) =>\n        setState({\n          loading: false,\n          error: error,\n        })\n      )\n  }, [loader])\n\n  return state\n}\n\nexport default useInjectKakaoMapApi\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}