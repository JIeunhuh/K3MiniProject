{"ast":null,"code":"var _jsxFileName = \"C:\\\\MiniProject\\\\project_front\\\\my_mini_project\\\\src\\\\project\\\\Mymap.js\",\n  _s = $RefreshSig$();\n// search - map 표시 \n// react-kakao-maps-sdk\nimport { Map, MapMarker } from \"react-kakao-maps-sdk\";\nimport { useState, useEffect, useRef } from 'react';\nimport style from './Food.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Mymap = ({\n  searchRes\n}) => {\n  _s();\n  // 위치 표시하기 위한 useRef\n  const mapRef = useRef();\n\n  // 마커 표시\n  const [desMarkers, setMarkers] = useState([]);\n\n  // searchRef object에 있는 주소를 좌표로 변환하고 마커 추가\n  useEffect(() => {\n    //주소-좌표간 변환 서비스 객체를 생성한다.\n    const geocoder = new window.kakao.maps.services.Geocoder();\n\n    // // 새로운 마커를 추가하기 전에 기존 마커를 지우기\n    // mapRef.current.markers.forEach((marker) => marker.setMap(null));\n    // mapRef.current.markers = [];\n\n    //searchRes에 있는 각 식당의주소 좌표로 변환하고 마커 표시\n    const updateMark = searchRes.map(item => {\n      const fullAddr = item.city + item.city_gu + item.city_dong + item.city_address;\n      geocoder.addressSearch(fullAddr, (result, status) => {\n        if (status == window.kakao.maps.services.Status.OK) {\n          const coords = new window.kakao.maps.LatLng(result[0].y, result[0].x);\n          const marker = new window.kakao.maps.Marker({\n            position: coords\n          });\n          marker.setMap(mapRef.current);\n          // mapRef.current.markers.push(marker);\n        }\n      });\n    });\n    //마커들을 상태에 저장\n    setMarkers(updateMark);\n  }, [searchRes]);\n  console.log(desMarkers);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${style.kakaoMap}`,\n    children: /*#__PURE__*/_jsxDEV(Map, {\n      ref: ref => mapRef.current = ref // 지도를 표시할 Container\n      ,\n      center: {\n        // 지도의 중심좌표\n        lat: 33.450701,\n        lng: 126.570667\n      },\n      style: {\n        // 지도의 크기\n        width: \"650px\",\n        height: \"550px\"\n      },\n      level: 3 // 지도의 확대 레벨\n      ,\n      children: /*#__PURE__*/_jsxDEV(MapMarker, {\n        position: {\n          lat: 33.450701,\n          lng: 126.570667\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(Mymap, \"W2btznbJriz/StOVgHrYsninr6w=\");\n_c = Mymap;\nexport default Mymap;\nvar _c;\n$RefreshReg$(_c, \"Mymap\");","map":{"version":3,"names":["Map","MapMarker","useState","useEffect","useRef","style","jsxDEV","_jsxDEV","Mymap","searchRes","_s","mapRef","desMarkers","setMarkers","geocoder","window","kakao","maps","services","Geocoder","updateMark","map","item","fullAddr","city","city_gu","city_dong","city_address","addressSearch","result","status","Status","OK","coords","LatLng","y","x","marker","Marker","position","setMap","current","console","log","className","kakaoMap","children","ref","center","lat","lng","width","height","level","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/MiniProject/project_front/my_mini_project/src/project/Mymap.js"],"sourcesContent":["// search - map 표시 \r\n// react-kakao-maps-sdk\r\nimport { Map, MapMarker } from \"react-kakao-maps-sdk\";\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport style from './Food.module.css';\r\n\r\nconst Mymap = ({ searchRes }) => {\r\n    // 위치 표시하기 위한 useRef\r\n    const mapRef = useRef();\r\n\r\n    // 마커 표시\r\n    const [desMarkers, setMarkers] = useState([]);\r\n\r\n    // searchRef object에 있는 주소를 좌표로 변환하고 마커 추가\r\n    useEffect(() => {\r\n        //주소-좌표간 변환 서비스 객체를 생성한다.\r\n        const geocoder = new window.kakao.maps.services.Geocoder();\r\n\r\n        // // 새로운 마커를 추가하기 전에 기존 마커를 지우기\r\n        // mapRef.current.markers.forEach((marker) => marker.setMap(null));\r\n        // mapRef.current.markers = [];\r\n\r\n        //searchRes에 있는 각 식당의주소 좌표로 변환하고 마커 표시\r\n        const updateMark = searchRes.map((item) => {\r\n            const fullAddr = item.city + item.city_gu + item.city_dong + item.city_address;\r\n            geocoder.addressSearch(fullAddr, (result, status) => {\r\n                if (status == window.kakao.maps.services.Status.OK) {\r\n                    const coords = new window.kakao.maps.LatLng(result[0].y, result[0].x);\r\n                    const marker = new window.kakao.maps.Marker({\r\n                        position: coords,\r\n                    });\r\n                    marker.setMap(mapRef.current);\r\n                    // mapRef.current.markers.push(marker);\r\n                }\r\n            });\r\n        });\r\n        //마커들을 상태에 저장\r\n        setMarkers(updateMark);\r\n    }, [searchRes]);\r\n    console.log(desMarkers);\r\n    return (\r\n        <div className={`${style.kakaoMap}`}>\r\n            <Map ref={(ref) => (mapRef.current = ref)}// 지도를 표시할 Container\r\n                center={{\r\n                    // 지도의 중심좌표\r\n                    lat: 33.450701,\r\n                    lng: 126.570667,\r\n                }}\r\n                style={{\r\n                    // 지도의 크기\r\n                    width: \"650px\",\r\n                    height: \"550px\",\r\n                }}\r\n                level={3} // 지도의 확대 레벨\r\n            >\r\n                <MapMarker position={{\r\n                    lat: 33.450701,\r\n                    lng: 126.570667\r\n                }} />\r\n            </Map>\r\n        </div>\r\n    );\r\n}\r\nexport default Mymap;\r\n"],"mappings":";;AAAA;AACA;AACA,SAASA,GAAG,EAAEC,SAAS,QAAQ,sBAAsB;AACrD,SAASC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACnD,OAAOC,KAAK,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,KAAK,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EAC7B;EACA,MAAMC,MAAM,GAAGP,MAAM,CAAC,CAAC;;EAEvB;EACA,MAAM,CAACQ,UAAU,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAE7C;EACAC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMW,QAAQ,GAAG,IAAIC,MAAM,CAACC,KAAK,CAACC,IAAI,CAACC,QAAQ,CAACC,QAAQ,CAAC,CAAC;;IAE1D;IACA;IACA;;IAEA;IACA,MAAMC,UAAU,GAAGX,SAAS,CAACY,GAAG,CAAEC,IAAI,IAAK;MACvC,MAAMC,QAAQ,GAAGD,IAAI,CAACE,IAAI,GAAGF,IAAI,CAACG,OAAO,GAAGH,IAAI,CAACI,SAAS,GAAGJ,IAAI,CAACK,YAAY;MAC9Eb,QAAQ,CAACc,aAAa,CAACL,QAAQ,EAAE,CAACM,MAAM,EAAEC,MAAM,KAAK;QACjD,IAAIA,MAAM,IAAIf,MAAM,CAACC,KAAK,CAACC,IAAI,CAACC,QAAQ,CAACa,MAAM,CAACC,EAAE,EAAE;UAChD,MAAMC,MAAM,GAAG,IAAIlB,MAAM,CAACC,KAAK,CAACC,IAAI,CAACiB,MAAM,CAACL,MAAM,CAAC,CAAC,CAAC,CAACM,CAAC,EAAEN,MAAM,CAAC,CAAC,CAAC,CAACO,CAAC,CAAC;UACrE,MAAMC,MAAM,GAAG,IAAItB,MAAM,CAACC,KAAK,CAACC,IAAI,CAACqB,MAAM,CAAC;YACxCC,QAAQ,EAAEN;UACd,CAAC,CAAC;UACFI,MAAM,CAACG,MAAM,CAAC7B,MAAM,CAAC8B,OAAO,CAAC;UAC7B;QACJ;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;IACF;IACA5B,UAAU,CAACO,UAAU,CAAC;EAC1B,CAAC,EAAE,CAACX,SAAS,CAAC,CAAC;EACfiC,OAAO,CAACC,GAAG,CAAC/B,UAAU,CAAC;EACvB,oBACIL,OAAA;IAAKqC,SAAS,EAAG,GAAEvC,KAAK,CAACwC,QAAS,EAAE;IAAAC,QAAA,eAChCvC,OAAA,CAACP,GAAG;MAAC+C,GAAG,EAAGA,GAAG,IAAMpC,MAAM,CAAC8B,OAAO,GAAGM,GAAK;MAAA;MACtCC,MAAM,EAAE;QACJ;QACAC,GAAG,EAAE,SAAS;QACdC,GAAG,EAAE;MACT,CAAE;MACF7C,KAAK,EAAE;QACH;QACA8C,KAAK,EAAE,OAAO;QACdC,MAAM,EAAE;MACZ,CAAE;MACFC,KAAK,EAAE,CAAE,CAAC;MAAA;MAAAP,QAAA,eAEVvC,OAAA,CAACN,SAAS;QAACsC,QAAQ,EAAE;UACjBU,GAAG,EAAE,SAAS;UACdC,GAAG,EAAE;QACT;MAAE;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAA/C,EAAA,CAxDKF,KAAK;AAAAkD,EAAA,GAALlD,KAAK;AAyDX,eAAeA,KAAK;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}