{"ast":null,"code":"var _jsxFileName = \"C:\\\\MiniProject\\\\project_front\\\\my_mini_project\\\\src\\\\project\\\\Mymap.js\",\n  _s = $RefreshSig$();\n// search - map 표시 \n// react-kakao-maps-sdk\nimport { Map, MapMarker } from \"react-kakao-maps-sdk\";\nimport { useState, useEffect, useRef } from 'react';\nimport style from './Food.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Mymap = ({\n  searchRes\n}) => {\n  _s();\n  var _state$center, _state$center2;\n  // 위치 표시하기 위한 useRef\n  const mapRef = useRef({\n    markers: []\n  }); //빈 배열로 초기화\n\n  // 마커 표시\n  const [desMarkers, setMarkers] = useState([]);\n\n  //바뀌는 마커의 상태를 저장\n  const [saveMarker, setSaveMarker] = useState();\n\n  // 위치 표시\n  const [state, setState] = useState({\n    center: {\n      lat: 33.450701,\n      lng: 126.570667\n    },\n    errMsg: null,\n    isLoading: true\n  });\n\n  // searchRef object에 있는 주소를 좌표로 변환하고 마커 추가\n  useEffect(() => {\n    //주소-좌표간 변환 서비스 객체를 생성한다.\n    const geocoder = new window.kakao.maps.services.Geocoder();\n\n    // 이전 마커를 삭제하기 위해 현재 마커를 변수에 저장\n    const prevMarkers = desMarkers.markers;\n\n    //searchRes에 있는 각 식당의주소 좌표로 변환하고 마커 표시\n    const updateMark = searchRes.map(item => {\n      const fullAddr = item.city + item.city_gu + item.city_dong + item.city_address;\n      geocoder.addressSearch(fullAddr, (result, status) => {\n        if (status == window.kakao.maps.services.Status.OK) {\n          const coords = new window.kakao.maps.LatLng(result[0].y, result[0].x);\n          const marker = new window.kakao.maps.Marker({\n            position: coords\n          });\n          marker.setMap(mapRef.current);\n          // mapRef.current.markers.push(marker);\n        }\n      });\n    });\n\n    //마커들을 상태에 저장하고 지도에 추가\n    setMarkers(updateMark);\n    updateMark.forEach(marker => marker.setMap(saveMarker));\n\n    //이전 마커를 삭제\n    prevMarkers.forEach(marker => marker.setMap(null));\n\n    // 검색결과가 있을 때, 첫 번째 음식점의 좌표를 가져오기\n    if (searchRes.length > 0) {\n      const firstAddr = searchRes[0].city + searchRes[0].city_gu + searchRes[0].city_dong + searchRes[0].city_address;\n      geocoder.addressSearch(firstAddr, (result, status) => {\n        if (status === window.kakao.maps.services.Status.OK) {\n          const coords = new window.kakao.maps.LatLng(result[0].y, result[0].x);\n          setState(prev => ({\n            ...prev,\n            center: {\n              lat: coords.getLat(),\n              lng: coords.getLng()\n            }\n          }));\n        }\n      });\n    }\n  }, [searchRes]);\n  console.log(desMarkers);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${style.kakaoMap}`,\n    children: /*#__PURE__*/_jsxDEV(Map, {\n      ref: mapRef // 지도를 표시할 Container\n      ,\n      center: state.center,\n      style: {\n        // 지도의 크기\n        width: \"650px\",\n        height: \"550px\"\n      },\n      level: 3 // 지도의 확대 레벨\n      ,\n      children: /*#__PURE__*/_jsxDEV(MapMarker, {\n        position: {\n          lat: (_state$center = state.center) === null || _state$center === void 0 ? void 0 : _state$center.lat,\n          lng: (_state$center2 = state.center) === null || _state$center2 === void 0 ? void 0 : _state$center2.lng\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n_s(Mymap, \"kwG0pbkLkXW6YC5o/IgVKPTF2x0=\");\n_c = Mymap;\nexport default Mymap;\nvar _c;\n$RefreshReg$(_c, \"Mymap\");","map":{"version":3,"names":["Map","MapMarker","useState","useEffect","useRef","style","jsxDEV","_jsxDEV","Mymap","searchRes","_s","_state$center","_state$center2","mapRef","markers","desMarkers","setMarkers","saveMarker","setSaveMarker","state","setState","center","lat","lng","errMsg","isLoading","geocoder","window","kakao","maps","services","Geocoder","prevMarkers","updateMark","map","item","fullAddr","city","city_gu","city_dong","city_address","addressSearch","result","status","Status","OK","coords","LatLng","y","x","marker","Marker","position","setMap","current","forEach","length","firstAddr","prev","getLat","getLng","console","log","className","kakaoMap","children","ref","width","height","level","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/MiniProject/project_front/my_mini_project/src/project/Mymap.js"],"sourcesContent":["// search - map 표시 \r\n// react-kakao-maps-sdk\r\nimport { Map, MapMarker } from \"react-kakao-maps-sdk\";\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport style from './Food.module.css';\r\n\r\nconst Mymap = ({ searchRes }) => {\r\n    // 위치 표시하기 위한 useRef\r\n    const mapRef = useRef({ markers: [] }); //빈 배열로 초기화\r\n\r\n    // 마커 표시\r\n    const [desMarkers, setMarkers] = useState([]);\r\n\r\n    //바뀌는 마커의 상태를 저장\r\n    const [saveMarker, setSaveMarker] = useState();\r\n\r\n    // 위치 표시\r\n    const [state, setState] = useState({\r\n        center: {\r\n            lat: 33.450701,\r\n            lng: 126.570667,\r\n        },\r\n        errMsg: null,\r\n        isLoading: true,\r\n    });\r\n\r\n    // searchRef object에 있는 주소를 좌표로 변환하고 마커 추가\r\n    useEffect(() => {\r\n        //주소-좌표간 변환 서비스 객체를 생성한다.\r\n        const geocoder = new window.kakao.maps.services.Geocoder();\r\n\r\n        // 이전 마커를 삭제하기 위해 현재 마커를 변수에 저장\r\n        const prevMarkers = desMarkers.markers;\r\n\r\n        //searchRes에 있는 각 식당의주소 좌표로 변환하고 마커 표시\r\n        const updateMark = searchRes.map((item) => {\r\n            const fullAddr = item.city + item.city_gu + item.city_dong + item.city_address;\r\n            geocoder.addressSearch(fullAddr, (result, status) => {\r\n                if (status == window.kakao.maps.services.Status.OK) {\r\n                    const coords = new window.kakao.maps.LatLng(result[0].y, result[0].x);\r\n                    const marker = new window.kakao.maps.Marker({\r\n                        position: coords,\r\n                    });\r\n                    marker.setMap(mapRef.current);\r\n                    // mapRef.current.markers.push(marker);\r\n                }\r\n            });\r\n        });\r\n\r\n        //마커들을 상태에 저장하고 지도에 추가\r\n        setMarkers(updateMark);\r\n        updateMark.forEach((marker) => marker.setMap(saveMarker));\r\n\r\n        //이전 마커를 삭제\r\n        prevMarkers.forEach((marker) => marker.setMap(null));\r\n\r\n        // 검색결과가 있을 때, 첫 번째 음식점의 좌표를 가져오기\r\n        if (searchRes.length > 0) {\r\n            const firstAddr = searchRes[0].city + searchRes[0].city_gu + searchRes[0].city_dong + searchRes[0].city_address;\r\n            geocoder.addressSearch(firstAddr, (result, status) => {\r\n                if (status === window.kakao.maps.services.Status.OK) {\r\n                    const coords = new window.kakao.maps.LatLng(result[0].y, result[0].x);\r\n                    setState((prev) => ({\r\n                        ...prev,\r\n                        center: {\r\n                            lat: coords.getLat(),\r\n                            lng: coords.getLng(),\r\n                        },\r\n                    }));\r\n                }\r\n            });\r\n        }\r\n    }, [searchRes]);\r\n\r\n\r\n\r\n    console.log(desMarkers);\r\n    return (\r\n        <div className={`${style.kakaoMap}`}>\r\n            <Map ref={mapRef} // 지도를 표시할 Container\r\n                center={state.center}\r\n                style={{\r\n                    // 지도의 크기\r\n                    width: \"650px\",\r\n                    height: \"550px\",\r\n                }}\r\n                level={3} // 지도의 확대 레벨\r\n            >\r\n                <MapMarker position={{ lat: state.center?.lat, lng: state.center?.lng }} />\r\n            </Map>\r\n        </div>\r\n    );\r\n}\r\nexport default Mymap;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}