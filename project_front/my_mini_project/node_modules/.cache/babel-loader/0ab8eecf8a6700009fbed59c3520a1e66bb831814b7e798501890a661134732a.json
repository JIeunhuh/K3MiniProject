{"ast":null,"code":"var _jsxFileName = \"C:\\\\MiniProject\\\\project_front\\\\my_mini_project\\\\src\\\\project\\\\Search_RestaurantLists\\\\Mymap.js\",\n  _s = $RefreshSig$();\n// search - map 표시 \n// react-kakao-maps-sdk\nimport { Map, MapMarker } from \"react-kakao-maps-sdk\";\nimport { useState, useEffect, useRef } from 'react';\nimport style from '../Food.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Mymap = ({\n  searchRes\n}) => {\n  _s();\n  var _state$center, _state$center2;\n  // 위치 표시하기 위한 useRef\n  const mapRef = useRef({\n    markers: []\n  }); //빈 배열로 초기화\n  // 이전 마커를 저장\n  const markersRef = useRef([]);\n\n  // 마커 표시\n  const [desMarkers, setMarkers] = useState([]);\n\n  // 초기 위치 표시\n  const [state, setState] = useState({\n    center: {\n      lat: 33.450701,\n      lng: 126.570667\n    },\n    errMsg: null,\n    isLoading: true\n  });\n\n  // searchRef object에 있는 주소를 좌표로 변환하고 마커 추가\n  useEffect(() => {\n    //주소-좌표간 변환 서비스 객체를 생성한다.\n    const geocoder = new window.kakao.maps.services.Geocoder();\n\n    //이전 마커 저장\n    markersRef.current.forEach(marker => marker.setMap(null));\n\n    //searchRes에 있는 각 식당의주소 좌표로 변환하고 마커 표시\n    const updateMark = searchRes.map(item => {\n      const fullAddr = item.city + item.city_gu + item.city_dong + item.city_address;\n      geocoder.addressSearch(fullAddr, (result, status) => {\n        if (status == window.kakao.maps.services.Status.OK) {\n          const coords = new window.kakao.maps.LatLng(result[0].y, result[0].x);\n          const marker = new window.kakao.maps.Marker({\n            position: coords\n          });\n          marker.setMap(mapRef.current);\n          // 이전 마커를 배열에 저장\n          markersRef.current.push(marker);\n          // mapRef.current.markers.push(marker);\n        }\n      });\n    });\n\n    //마커들을 상태에 저장하고 지도에 추가\n    setMarkers(updateMark);\n    // updateMark.forEach((marker) => marker.setMap(saveMarker));\n\n    //이전 마커를 삭제\n    // prevMarkers.forEach((marker) => marker.setMap(null));\n\n    // 검색결과가 있을 때, 첫 번째 음식점의 좌표를 가져오기\n    if (searchRes.length > 0) {\n      const firstAddr = searchRes[0].city + searchRes[0].city_gu + searchRes[0].city_dong + searchRes[0].city_address;\n      geocoder.addressSearch(firstAddr, (result, status) => {\n        if (status === window.kakao.maps.services.Status.OK) {\n          const coords = new window.kakao.maps.LatLng(result[0].y, result[0].x);\n          setState(prev => ({\n            ...prev,\n            center: {\n              lat: coords.getLat(),\n              lng: coords.getLng()\n            }\n          }));\n        }\n      });\n    }\n  }, [searchRes]);\n  console.log(desMarkers);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${style.kakaoMap}`,\n    children: /*#__PURE__*/_jsxDEV(Map, {\n      ref: mapRef // 지도를 표시할 Container\n      ,\n      center: state.center,\n      style: {\n        // 지도의 크기\n        width: \"550px\",\n        height: \"450px\",\n        display: \"flex\"\n      },\n      level: 2 // 지도의 확대 레벨\n      ,\n      children: /*#__PURE__*/_jsxDEV(MapMarker, {\n        position: {\n          lat: (_state$center = state.center) === null || _state$center === void 0 ? void 0 : _state$center.lat,\n          lng: (_state$center2 = state.center) === null || _state$center2 === void 0 ? void 0 : _state$center2.lng\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n_s(Mymap, \"S0KiApgsqCFrvYqkQGZ/xkYggdg=\");\n_c = Mymap;\nexport default Mymap;\nvar _c;\n$RefreshReg$(_c, \"Mymap\");","map":{"version":3,"names":["Map","MapMarker","useState","useEffect","useRef","style","jsxDEV","_jsxDEV","Mymap","searchRes","_s","_state$center","_state$center2","mapRef","markers","markersRef","desMarkers","setMarkers","state","setState","center","lat","lng","errMsg","isLoading","geocoder","window","kakao","maps","services","Geocoder","current","forEach","marker","setMap","updateMark","map","item","fullAddr","city","city_gu","city_dong","city_address","addressSearch","result","status","Status","OK","coords","LatLng","y","x","Marker","position","push","length","firstAddr","prev","getLat","getLng","console","log","className","kakaoMap","children","ref","width","height","display","level","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/MiniProject/project_front/my_mini_project/src/project/Search_RestaurantLists/Mymap.js"],"sourcesContent":["// search - map 표시 \r\n// react-kakao-maps-sdk\r\nimport { Map, MapMarker } from \"react-kakao-maps-sdk\";\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport style from '../Food.module.css';\r\n\r\nconst Mymap = ({ searchRes }) => {\r\n    \r\n    // 위치 표시하기 위한 useRef\r\n    const mapRef = useRef({ markers: [] }); //빈 배열로 초기화\r\n    // 이전 마커를 저장\r\n    const markersRef = useRef([]);\r\n\r\n    // 마커 표시\r\n    const [desMarkers, setMarkers] = useState([]);\r\n\r\n    // 초기 위치 표시\r\n    const [state, setState] = useState({\r\n        center: {\r\n            lat: 33.450701,\r\n            lng: 126.570667,\r\n        },\r\n        errMsg: null,\r\n        isLoading: true,\r\n    });\r\n\r\n    // searchRef object에 있는 주소를 좌표로 변환하고 마커 추가\r\n    useEffect(() => {\r\n        //주소-좌표간 변환 서비스 객체를 생성한다.\r\n        const geocoder = new window.kakao.maps.services.Geocoder();\r\n\r\n        //이전 마커 저장\r\n        markersRef.current.forEach(marker => marker.setMap(null));\r\n\r\n        //searchRes에 있는 각 식당의주소 좌표로 변환하고 마커 표시\r\n        const updateMark = searchRes.map((item) => {\r\n            const fullAddr = item.city + item.city_gu + item.city_dong + item.city_address;\r\n            geocoder.addressSearch(fullAddr, (result, status) => {\r\n                if (status == window.kakao.maps.services.Status.OK) {\r\n                    const coords = new window.kakao.maps.LatLng(result[0].y, result[0].x);\r\n                    const marker = new window.kakao.maps.Marker({\r\n                        position: coords,\r\n                    });\r\n                    marker.setMap(mapRef.current);\r\n                    // 이전 마커를 배열에 저장\r\n                    markersRef.current.push(marker);\r\n                    // mapRef.current.markers.push(marker);\r\n                }\r\n            });\r\n        });\r\n\r\n        //마커들을 상태에 저장하고 지도에 추가\r\n        setMarkers(updateMark);\r\n        // updateMark.forEach((marker) => marker.setMap(saveMarker));\r\n\r\n        //이전 마커를 삭제\r\n        // prevMarkers.forEach((marker) => marker.setMap(null));\r\n\r\n        // 검색결과가 있을 때, 첫 번째 음식점의 좌표를 가져오기\r\n        if (searchRes.length > 0) {\r\n            const firstAddr = searchRes[0].city + searchRes[0].city_gu + searchRes[0].city_dong + searchRes[0].city_address;\r\n            geocoder.addressSearch(firstAddr, (result, status) => {\r\n                if (status === window.kakao.maps.services.Status.OK) {\r\n                    const coords = new window.kakao.maps.LatLng(result[0].y, result[0].x);\r\n                    setState((prev) => ({\r\n                        ...prev,\r\n                        center: {\r\n                            lat: coords.getLat(),\r\n                            lng: coords.getLng(),\r\n                        },\r\n                    }));\r\n                }\r\n            });\r\n        }\r\n    }, [searchRes]);\r\n\r\n\r\n\r\n    console.log(desMarkers);\r\n    return (\r\n        <div className={`${style.kakaoMap}`}>\r\n            <Map ref={mapRef} // 지도를 표시할 Container\r\n                center={state.center}\r\n                style={{\r\n                    // 지도의 크기\r\n                    width: \"550px\",\r\n                    height: \"450px\",\r\n                    display: \"flex\",\r\n                }}\r\n                level={2} // 지도의 확대 레벨\r\n            >\r\n                <MapMarker position={{ lat: state.center?.lat, lng: state.center?.lng }} />\r\n            </Map>\r\n        </div>\r\n    );\r\n}\r\nexport default Mymap;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}