{"ast":null,"code":"var _jsxFileName = \"C:\\\\MiniProject\\\\project_front\\\\my_mini_project\\\\src\\\\project\\\\Community(SignUp&In)\\\\Write.js\",\n  _s = $RefreshSig$();\nimport { nicknameState } from '../LoginRecoil';\nimport styles from './Community.module.css';\nimport { useRecoilValue } from 'recoil';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Write = () => {\n  _s();\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [insertBoard, setInsertBoard] = useState([]);\n  const nickname = useRecoilValue(nicknameState);\n  const handleTitleChange = e => {\n    setTitle(e.target.value);\n  };\n  const handleContentChange = e => {\n    setContent(e.target.value);\n  };\n  const handleSubmit = () => {\n    // 작성한 글을 서버에 전송하는 로직 추가 (API 호출 등)\n    console.log('Title:', title);\n    console.log('Content:', content);\n    const data = {\n      title,\n      content,\n      nickname\n    };\n    // 필요한 경우 서버와의 통신 로직을 구현하세요.\n    let url = 'http://10.125.121.176:8080/insertBoard';\n    fetch(url, data).then(resp => {\n      // 서버 응답 처리 \n      console.log('게시글 작성 성공', resp.data);\n      // userReview를 상태에 저장\n      setInsertBoard(data);\n    }).catch(err => {\n      // 오류 처리\n      console.log('리뷰 작성 오류:', err);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${styles.commBox} container`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.comm_rec1,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.comm_rec2,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uAE00\\uC4F0\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Title\",\n          value: title,\n          onChange: handleTitleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"Content\",\n          value: content,\n          onChange: handleContentChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSubmit,\n          children: \"\\uC791\\uC131 \\uC644\\uB8CC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n_s(Write, \"j40OePTbZhGBpBKmLsOm4KCXalk=\", false, function () {\n  return [useRecoilValue];\n});\n_c = Write;\nexport default Write;\nvar _c;\n$RefreshReg$(_c, \"Write\");","map":{"version":3,"names":["nicknameState","styles","useRecoilValue","useState","jsxDEV","_jsxDEV","Write","_s","title","setTitle","content","setContent","insertBoard","setInsertBoard","nickname","handleTitleChange","e","target","value","handleContentChange","handleSubmit","console","log","data","url","fetch","then","resp","catch","err","className","commBox","children","comm_rec1","comm_rec2","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/MiniProject/project_front/my_mini_project/src/project/Community(SignUp&In)/Write.js"],"sourcesContent":["import { nicknameState } from '../LoginRecoil';\r\nimport styles from './Community.module.css';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { useState } from 'react';\r\n\r\nconst Write = () => {\r\n\r\n    const [title, setTitle] = useState('');\r\n    const [content, setContent] = useState('');\r\n    const [insertBoard, setInsertBoard] = useState([]);\r\n    const nickname = useRecoilValue(nicknameState);\r\n\r\n    const handleTitleChange = (e) => {\r\n        setTitle(e.target.value);\r\n    }\r\n\r\n    const handleContentChange = (e) => {\r\n        setContent(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        // 작성한 글을 서버에 전송하는 로직 추가 (API 호출 등)\r\n        console.log('Title:', title);\r\n        console.log('Content:', content);\r\n\r\n        const data = {\r\n            title,\r\n            content,\r\n            nickname,\r\n\r\n        }\r\n        // 필요한 경우 서버와의 통신 로직을 구현하세요.\r\n        let url = 'http://10.125.121.176:8080/insertBoard';\r\n\r\n        fetch(url, data)\r\n            .then((resp) => {\r\n                // 서버 응답 처리 \r\n                console.log('게시글 작성 성공', resp.data)\r\n                // userReview를 상태에 저장\r\n                setInsertBoard(data);\r\n            })\r\n            .catch((err) => {\r\n                // 오류 처리\r\n                console.log('리뷰 작성 오류:', err);\r\n            });\r\n\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div className={`${styles.commBox} container`}>\r\n            <div className={styles.comm_rec1}>\r\n                <div className={styles.comm_rec2}>\r\n                    <h2>글쓰기</h2>\r\n                    <input type=\"text\" placeholder=\"Title\" value={title} onChange={handleTitleChange} />\r\n                    <textarea placeholder=\"Content\" value={content} onChange={handleContentChange} />\r\n                    <button onClick={handleSubmit}>작성 완료</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\nexport default Write;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}